package main

import (
	"fmt"
	"strings"

	"github.com/benoitkugler/go-weasyprint/text/unicodedata/tools"
)

const (
	urlSentences = "https://unicode.org/Public/UCD/latest/ucd/auxiliary/SentenceBreakProperty.txt"
	urlIndic     = "https://unicode.org/Public/UCD/latest/ucd/IndicSyllabicCategory.txt"
)

func onecondition(cond tools.Rg) string {
	condition := ""
	if cond.Start == cond.End {
		condition = fmt.Sprintf("wc == 0x%04x", cond.Start)
	} else if cond.Start < cond.End {
		condition = fmt.Sprintf("(wc >= 0x%04x && wc <= 0x%04x)", cond.Start, cond.End)
	}
	return condition
}

//print out the numbers in compact form
func printIfBranch(ranges []tools.Rg) {
	var conditions []string
	for _, cond := range ranges {
		conditions = append(conditions, onecondition(cond))
	}
	statement := strings.Join(conditions, "||\n")
	fmt.Printf(`if (%s) {
			return true
		}
		return false		
		`, statement)
}

func printOneLine(cond tools.Rg) {
	if cond.Start < cond.End {
		outline := "if (" + onecondition(cond) + ")"
		fmt.Print(outline)
	}
}

func printRanges(ranges []tools.Rg) {
	if 4 >= len(ranges) {
		var conditions []string
		for _, cond := range ranges {
			conditions = append(conditions, onecondition(cond))
		}

		statement := strings.Join(conditions, "||\n")
		fmt.Printf(`if (%s) {
					return true
				}
				`, statement)
		return
	}
	start := ranges[0].Start
	end := ranges[len(ranges)-1].End
	printOneLine(tools.Rg{Start: start, End: end})
	fmt.Print("{")
	printBalancedSearch(ranges)
	fmt.Println("}")
}

//print if branch like 4 - way balanced search
func printBalancedSearch(ranges []tools.Rg) {
	if 4 >= len(ranges) {
		printRanges(ranges)
		return
	}

	length := len(ranges)
	step := length / 4
	first := step
	second := length * 2 / 4
	third := second + step

	newranges := ranges[0:first]
	printRanges(newranges)

	newranges = ranges[first:second]
	printRanges(newranges)

	newranges = ranges[second:third]
	printRanges(newranges)

	newranges = ranges[third:]
	printRanges(newranges)

	fmt.Println("return false")
}

func printTable(ranges map[string][]tools.Rg) {
	fmt.Println(`// Generated by makebreaks.go
	// DO NOT EDIT

	package unicodedata
	
	// data from : ` + urlSentences + "\n// and :" + urlIndic)

	for typ, s := range ranges {
		if typ != "STerm" && typ != "Virama" && typ != "Vowel_Dependent" {
			continue
		}
		fmt.Println()
		fmt.Printf("func Is%s (wc rune) bool", typ)
		fmt.Println("{")
		tools.SortRanges(s)
		printBalancedSearch(s)
		fmt.Println("}")
	}
}

func main() {
	ranges := map[string][]tools.Rg{}
	s := tools.FetchData(urlSentences)
	tools.Parse(s, ranges)
	s = tools.FetchData(urlIndic)
	tools.Parse(s, ranges)
	printTable(ranges)
}
