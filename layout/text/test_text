// TODO: include theses tests 

@assertNoLogs
func testTextFontSizeZero() {
    page, = renderPages("""
      <style>
        p { font-size: 0; }
      </style>
      <p>test font size zero</p>
    """)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    // zero-sized text boxes are removed
    assert ! line.children
    assert line.height == 0
    assert paragraph.height == 0


@assertNoLogs
func testTextSpacedInlines():
    page, = renderPages("""
      <p>start <i><b>bi1</b> <b>bi2</b></i> <b>b1</b> end</p>
    """)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    start, i, space, b, end = line.children
    assert start.text == "start "
    assert space.text == " "
    assert space.width > 0
    assert end.text == " end"
} 
    bi1, space, bi2 = i.children
    bi1, = bi1.children
    bi2, = bi2.children
    assert bi1.text == "bi1"
    assert space.text == " "
    assert space.width > 0
    assert bi2.text == "bi2"

    b1, = b.children
    assert b1.text == "b1"


@assertNoLogs
func testTextAlignLeft() {
    // <-------------------->  page, body
    //     +-----+
    // +---+     |
    // |   |     |
    // +---+-----+
} 
    // ^   ^     ^          ^
    // x=0 x=40  x=100      x=200
    page, = renderPages("""
      <style>
        @page { size: 200px }
      </style>
      <body>
        <img src="pattern.png" style="width: 40px"
        ><img src="pattern.png" style="width: 60px">""")
    html, = page.children
    body, = html.children
    line, = body.children
    img1, img2 = line.children
    // initial value for text-align: left (in ltr text)
    assert img1.positionX == 0
    assert img2.positionX == 40


@assertNoLogs
func testTextAlignRight() {
    // <-------------------->  page, body
    //                +-----+
    //            +---+     |
    //            |   |     |
    //            +---+-----+
} 
    // ^          ^   ^     ^
    // x=0        x=100     x=200
    //                x=140
    page, = renderPages("""
      <style>
        @page { size: 200px }
        body { text-align: right }
      </style>
      <body>
        <img src="pattern.png" style="width: 40px"
        ><img src="pattern.png" style="width: 60px">""")
    html, = page.children
    body, = html.children
    line, = body.children
    img1, img2 = line.children
    assert img1.positionX == 100  // 200 - 60 - 40
    assert img2.positionX == 140  // 200 - 60


@assertNoLogs
func testTextAlignCenter() {
    // <-------------------->  page, body
    //           +-----+
    //       +---+     |
    //       |   |     |
    //       +---+-----+
} 
    // ^     ^   ^     ^
    // x=    x=50     x=150
    //           x=90
    page, = renderPages("""
      <style>
        @page { size: 200px }
        body { text-align: center }
      </style>
      <body>
        <img src="pattern.png" style="width: 40px"
        ><img src="pattern.png" style="width: 60px">""")
    html, = page.children
    body, = html.children
    line, = body.children
    img1, img2 = line.children
    assert img1.positionX == 50
    assert img2.positionX == 90


@assertNoLogs
func testTextAlignJustify() {
    page, = renderPages("""
      <style>
        @page { size: 300px 1000px }
        body { text-align: justify }
      </style>
      <p><img src="pattern.png" style="width: 40px">
        <strong>
          <img src="pattern.png" style="width: 60px">
          <img src="pattern.png" style="width: 10px">
          <img src="pattern.png" style="width: 100px"
        ></strong><img src="pattern.png" style="width: 290px"
        ><!-- Last image will be on its own line. -->""")
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
    image1, space1, strong = line1.children
    image2, space2, image3, space3, image4 = strong.children
    image5, = line2.children
    assert space1.text == " "
    assert space2.text == " "
    assert space3.text == " "
} 
    assert image1.positionX == 0
    assert space1.positionX == 40
    assert strong.positionX == 70
    assert image2.positionX == 70
    assert space2.positionX == 130
    assert image3.positionX == 160
    assert space3.positionX == 170
    assert image4.positionX == 200
    assert strong.width == 230

    assert image5.positionX == 0


@assertNoLogs
func testTextAlignJustifyAll() {
    page, = renderPages("""
      <style>
        @page { size: 300px 1000px }
        body { text-align: justify-all }
      </style>
      <p><img src="pattern.png" style="width: 40px">
        <strong>
          <img src="pattern.png" style="width: 60px">
          <img src="pattern.png" style="width: 10px">
          <img src="pattern.png" style="width: 100px"
        ></strong><img src="pattern.png" style="width: 200px">
        <img src="pattern.png" style="width: 10px">""")
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
    image1, space1, strong = line1.children
    image2, space2, image3, space3, image4 = strong.children
    image5, space4, image6 = line2.children
    assert space1.text == " "
    assert space2.text == " "
    assert space3.text == " "
    assert space4.text == " "
} 
    assert image1.positionX == 0
    assert space1.positionX == 40
    assert strong.positionX == 70
    assert image2.positionX == 70
    assert space2.positionX == 130
    assert image3.positionX == 160
    assert space3.positionX == 170
    assert image4.positionX == 200
    assert strong.width == 230

    assert image5.positionX == 0
    assert space4.positionX == 200
    assert image6.positionX == 290


@assertNoLogs
func testTextAlignAllLast() {
    page, = renderPages("""
      <style>
        @page { size: 300px 1000px }
        body { text-align-all: justify; text-align-last: right }
      </style>
      <p><img src="pattern.png" style="width: 40px">
        <strong>
          <img src="pattern.png" style="width: 60px">
          <img src="pattern.png" style="width: 10px">
          <img src="pattern.png" style="width: 100px"
        ></strong><img src="pattern.png" style="width: 200px"
        ><img src="pattern.png" style="width: 10px">""")
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
    image1, space1, strong = line1.children
    image2, space2, image3, space3, image4 = strong.children
    image5, image6 = line2.children
    assert space1.text == " "
    assert space2.text == " "
    assert space3.text == " "
} 
    assert image1.positionX == 0
    assert space1.positionX == 40
    assert strong.positionX == 70
    assert image2.positionX == 70
    assert space2.positionX == 130
    assert image3.positionX == 160
    assert space3.positionX == 170
    assert image4.positionX == 200
    assert strong.width == 230

    assert image5.positionX == 90
    assert image6.positionX == 290


@assertNoLogs
func testTextAlignNotEnoughSpace() {
    page, = renderPages("""
      <style>
        p { text-align: center; width: 0 }
        span { display: inline-block }
      </style>
      <p><span>aaaaaaaaaaaaaaaaaaaaaaaaaa</span></p>""")
    html, = page.children
    body, = html.children
    paragraph, = body.children
    span, = paragraph.children
    assert span.positionX == 0
} 

@assertNoLogs
func testTextAlignJustifyNoSpace() {
    // single-word line (zero spaces)
    page, = renderPages("""
      <style>
        body { text-align: justify; width: 50px }
      </style>
      <p>Supercalifragilisticexpialidocious bar</p>
    """)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
    text, = line1.children
    assert text.positionX == 0


@assertNoLogs
func testTextAlignJustifyTextIndent():
    // text-indent
    page, = renderPages("""
      <style>
        @page { size: 300px 1000px }
        body { text-align: justify }
        p { text-indent: 3px }
      </style>
      <p><img src="pattern.png" style="width: 40px">
        <strong>
          <img src="pattern.png" style="width: 60px">
          <img src="pattern.png" style="width: 10px">
          <img src="pattern.png" style="width: 100px"
        ></strong><img src="pattern.png" style="width: 290px"
        ><!-- Last image will be on its own line. -->""")
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
    image1, space1, strong = line1.children
    image2, space2, image3, space3, image4 = strong.children
    image5, = line2.children
    assert space1.text == " "
    assert space2.text == " "
    assert space3.text == " "

    assert image1.positionX == 3
    assert space1.positionX == 43
    assert strong.positionX == 72
    assert image2.positionX == 72
    assert space2.positionX == 132
    assert image3.positionX == 161
    assert space3.positionX == 171
    assert image4.positionX == 200
    assert strong.width == 228

    assert image5.positionX == 0


@assertNoLogs
func testTextAlignJustifyNoBreakBetweenChildren():
    // Test justification when line break happens between two inline children
    // that must stay together.
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/637
    page, = renderPages("""
      <style>
        @font-face {src: url(weasyprint.otf); font-family: weasyprint}
        p { text-align: justify; font-family: weasyprint; width: 7em }
      </style>
      <p>
        <span>a</span>
        <span>b</span>
        <span>bla</span><span>,</span>
        <span>b</span>
      </p>
    """)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line1, line2 = paragraph.children
} 
    span1, space1, span2, space2 = line1.children
    assert span1.positionX == 0
    assert span2.positionX == 6 * 16  // 1 character + 5 spaces
    assert line1.width == 7 * 16  // 7em

    span1, span2, space1, span3, space2 = line2.children
    assert span1.positionX == 0
    assert span2.positionX == 3 * 16  // 3 characters
    assert span3.positionX == 5 * 16  // (3 + 1) characters + 1 space


@assertNoLogs
func testWordSpacing() {
    // keep the empty <style> as a regression test: element.text  == nil 
    // (Not a string.)
    page, = renderPages("""
      <style></style>
      <body><strong>Lorem ipsum dolor<em>sit amet</em></strong>""")
    html, = page.children
    body, = html.children
    line, = body.children
    strong1, = line.children
} 
    // TODO: Pango gives only half of word-spacing to a space at the end
    // of a TextBox. Is this what we want?
    page, = renderPages("""
      <style>strong { word-spacing: 11px }</style>
      <body><strong>Lorem ipsum dolor<em>sit amet</em></strong>""")
    html, = page.children
    body, = html.children
    line, = body.children
    strong2, = line.children
    assert strong2.width - strong1.width == 33


@assertNoLogs
func testLetterSpacing1() {
    page, = renderPages("""
        <body><strong>Supercalifragilisticexpialidocious</strong>""")
    html, = page.children
    body, = html.children
    line, = body.children
    strong1, = line.children
} 
    page, = renderPages("""
        <style>strong { letter-spacing: 11px }</style>
        <body><strong>Supercalifragilisticexpialidocious</strong>""")
    html, = page.children
    body, = html.children
    line, = body.children
    strong2, = line.children
    assert strong2.width - strong1.width == 34 * 11

    // an embedded tag should ! affect the single-line letter spacing
    page, = renderPages(
        "<style>strong { letter-spacing: 11px }</style>"
        "<body><strong>Supercali<span>fragilistic</span>expialidocious"
        "</strong>")
    html, = page.children
    body, = html.children
    line, = body.children
    strong3, = line.children
    assert strong3.width == strong2.width

    // duplicate wrapped lines should also have same overall width
    // Note work-around for word-wrap bug (issue #163) by marking word
    // as an inline-block
    page, = renderPages(
        "<style>"
        "  strong {"
        "    letter-spacing: 11px;"
        f"    max-width: {strong3.width * 1.5}px"
        "}"
        "  span { display: inline-block }"
        "</style>"
        "<body><strong>"
        "  <span>Supercali<i>fragilistic</i>expialidocious</span> "
        "  <span>Supercali<i>fragilistic</i>expialidocious</span>"
        "</strong>")
    html, = page.children
    body, = html.children
    line1, line2 = body.children
    assert line1.children[0].width == line2.children[0].width
    assert line1.children[0].width == strong2.width


@pytest.mark.parametrize("spacing", ("word-spacing", "letter-spacing"))
@assertNoLogs
func testSpacingEx(spacing) {
    // Test regression on ex units := range spacing properties
    renderPages(f"<div style="{spacing}: 2ex">abc def")
} 

@pytest.mark.parametrize("indent", ("12px", "6%"))
@assertNoLogs
func testTextIndent(indent) {
    page, = renderPages("""
        <style>
            @page { size: 220px }
            body { margin: 10px; text-indent: %(indent)s }
        </style>
        <p>Some text that is long enough that it take at least three line,
           but maybe more.
    """ % {"indent": indent})
    html, = page.children
    body, = html.children
    paragraph, = body.children
    lines = paragraph.children
    text1, = lines[0].children
    text2, = lines[1].children
    text3, = lines[2].children
    assert text1.positionX == 22  // 10px margin-left + 12px indent
    assert text2.positionX == 10  // No indent
    assert text3.positionX == 10  // No indent


@assertNoLogs
func testTextIndentInline():
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/1000
    page, = renderPages("""
        <style>
            @font-face { src: url(weasyprint.otf); font-family: weasyprint }
            p { display: inline-block; text-indent: 1em;
                font-family: weasyprint }
        </style>
        <p><span>text
    """)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    assert line.width == (4 + 1) * 16
} 

@pytest.mark.parametrize("indent", ("12px", "6%"))
@assertNoLogs
func testTextIndentMultipage(indent) {
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/706
    pages = renderPages("""
        <style>
            @page { size: 220px 1.5em; margin: 0 }
            body { margin: 10px; text-indent: %(indent)s }
        </style>
        <p>Some text that is long enough that it take at least three line,
           but maybe more.
    """ % {"indent": indent})
    page = pages.pop(0)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    text, = line.children
    assert text.positionX == 22  // 10px margin-left + 12px indent

    page = pages.pop(0)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    text, = line.children
    assert text.positionX == 10  // No indent


@assertNoLogs
func testHyphenateCharacter1():
    page, = renderPages(
        "<html style="width: 5em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-character: \"!\"" lang=fr>"
        "hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("!")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace("!", "") == "hyphénation"


@assertNoLogs
func testHyphenateCharacter2():
    page, = renderPages(
        "<html style="width: 5em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-character: \"à\"" lang=fr>"
        "hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("à")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace("à", "") == "hyphénation"


@assertNoLogs
func testHyphenateCharacter3():
    page, = renderPages(
        "<html style="width: 5em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-character: \"ù ù\"" lang=fr>"
        "hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("ù ù")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace(" ", "").replace("ù", "") == "hyphénation"


@assertNoLogs
func testHyphenateCharacter4():
    page, = renderPages(
        "<html style="width: 5em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-character: \"\"" lang=fr>"
        "hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText == "hyphénation"


@assertNoLogs
func testHyphenateCharacter5():
    page, = renderPages(
        "<html style="width: 5em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-character: \"———\"" lang=fr>"
        "hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("———")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace("—", "") == "hyphénation"


@assertNoLogs
func testHyphenateManual1():
    for i := range range(1, len("hyphénation")):
        for hyphenateCharacter := range ("!", "ù ù"):
            word = "hyphénation"[:i] + "\u00ad" + "hyphénation"[i:]
            page, = renderPages(
                "<html style="width: 5em; font-family: weasyprint">"
                "<style>@font-face {"
                "  src: url(weasyprint.otf); font-family: weasyprint}</style>"
                "<body style="hyphens: manual;"
                f"  hyphenate-character: \"{hyphenateCharacter}\"""
                f"  lang=fr>{word}")
            html, = page.children
            body, = html.children
            lines = body.children
            assert len(lines) == 2
            assert lines[0].children[0].text.endswith(hyphenateCharacter)
            fullText = "".join(
                child.text for line := range lines for child := range line.children)
            assert fullText.replace(hyphenateCharacter, "") == word


@assertNoLogs
func testHyphenateManual2():
    for i := range range(1, len("hy phénation")):
        for hyphenateCharacter := range ("!", "ù ù"):
            word = "hy phénation"[:i] + "\u00ad" + "hy phénation"[i:]
            page, = renderPages(
                "<html style="width: 5em; font-family: weasyprint">"
                "<style>@font-face {"
                "  src: url(weasyprint.otf); font-family: weasyprint}</style>"
                "<body style="hyphens: manual;"
                f"  hyphenate-character: \"{hyphenateCharacter}\"""
                f"  lang=fr>{word}")
            html, = page.children
            body, = html.children
            lines = body.children
            assert len(lines) := range (2, 3)
            fullText = "".join(
                child.text for line := range lines for child := range line.children)
            fullText = fullText.replace(hyphenateCharacter, "")
            if lines[0].children[0].text.endswith(hyphenateCharacter):
                assert fullText == word
            else:
                assert lines[0].children[0].text.endswith("y")
                if len(lines) == 3:
                    assert lines[1].children[0].text.endswith(
                        hyphenateCharacter)


@assertNoLogs
func testHyphenateManual3():
    // Automatic hyphenation opportunities within a word must be ignored if the
    // word contains a conditional hyphen, := range favor of the conditional
    // hyphen(s).
    page, = renderPages(
        "<html style="width: 0.1em" lang="en">"
        "<body style="hyphens: auto">in&shy;lighten&shy;lighten&shy;in")
    html, = page.children
    body, = html.children
    line1, line2, line3, line4 = body.children
    assert line1.children[0].text == "in\xad‐"
    assert line2.children[0].text == "lighten\xad‐"
    assert line3.children[0].text == "lighten\xad‐"
    assert line4.children[0].text == "in"


@assertNoLogs
func testHyphenateLimitZone1():
    page, = renderPages(
        "<html style="width: 12em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-limit-zone: 0" lang=fr>"
        "mmmmm hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) == 2
    assert lines[0].children[0].text.endswith("‐")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace("‐", "") == "mmmmm hyphénation"


@assertNoLogs
func testHyphenateLimitZone2():
    page, = renderPages(
        "<html style="width: 12em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-limit-zone: 9em" lang=fr>"
        "mmmmm hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("mm")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText == "mmmmmhyphénation"


@assertNoLogs
func testHyphenateLimitZone3():
    page, = renderPages(
        "<html style="width: 12em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-limit-zone: 5%" lang=fr>"
        "mmmmm hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) == 2
    assert lines[0].children[0].text.endswith("‐")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText.replace("‐", "") == "mmmmm hyphénation"


@assertNoLogs
func testHyphenateLimitZone4():
    page, = renderPages(
        "<html style="width: 12em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        "hyphenate-limit-zone: 95%" lang=fr>"
        "mmmmm hyphénation")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) > 1
    assert lines[0].children[0].text.endswith("mm")
    fullText = "".join(line.children[0].text for line := range lines)
    assert fullText == "mmmmmhyphénation"


@assertNoLogs
@pytest.mark.parametrize("css, result", (
    ("auto", 2),
    ("auto auto 0", 2),
    ("0 0 0", 2),
    ("4 4 auto", 1),
    ("6 2 4", 2),
    ("auto 1 auto", 2),
    ("7 auto auto", 1),
    ("6 auto auto", 2),
    ("5 2", 2),
    ("3", 2),
    ("2 4 6", 1),
    ("auto 4", 1),
    ("auto 2", 2),
))
func testHyphenateLimitChars(css, result):
    page, = renderPages(
        "<html style="width: 1em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        f"hyphenate-limit-chars: {css}" lang=en>"
        "hyphen")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) == result


@assertNoLogs
@pytest.mark.parametrize("css", (
    // light·en
    "3 3 3",  // "en" is shorter than 3
    "3 6 2",  // "light" is shorter than 6
    "8",  // "lighten" is shorter than 8
))
func testHyphenateLimitCharsPunctuation(css):
    // See https://github.com/Kozea/WeasyPrint/issues/109
    page, = renderPages(
        "<html style="width: 1em; font-family: weasyprint">"
        "<style>"
        "  @font-face {src: url(weasyprint.otf); font-family: weasyprint}"
        "</style>"
        "<body style="hyphens: auto;"
        f"hyphenate-limit-chars: {css}" lang=en>"
        "..lighten..")
    html, = page.children
    body, = html.children
    lines = body.children
    assert len(lines) == 1


@assertNoLogs
@pytest.mark.parametrize("wrap, text, test, fullText", (
    ("break-word", "aaaaaaaa", lambda a: a > 1, "aaaaaaaa"),
    ("normal", "aaaaaaaa", lambda a: a == 1, "aaaaaaaa"),
    ("break-word", "hyphenations", lambda a: a > 3,
     "hy\u2010phen\u2010ations"),
    ("break-word", "A splitted word.  An hyphenated word.",
     lambda a: a > 8, "Asplittedword.Anhy\u2010phen\u2010atedword."),
))
func testOverflowWrap(wrap, text, test, fullText):
    page, = renderPages("""
      <style>
        @font-face {src: url(weasyprint.otf); font-family: weasyprint}
        body {width: 80px; overflow: hidden; font-family: weasyprint; }
        span {overflow-wrap: %s; white-space: normal; }
      </style>
      <body style="hyphens: auto;" lang="en">
        <span>%s
    """ % (wrap, text))
    html, = page.children
    body, = html.children
    lines = []
    for line := range body.children {
        box, = line.children
        textBox, = box.children
        lines.append(textBox.text)
    } linesFullText = "".join(line for line := range lines)
    assert test(len(lines))
    assert fullText == linesFullText
} 

func whiteSpaceLines(width, space) {
    page, = renderPages("""
      <style>
        body { font-size: 100px; width: %dpx }
        span { white-space: %s }
      </style>
      <body><span>This +    \n    is text""" % (width, space))
    html, = page.children
    body, = html.children
    return body.children
} 

@assertNoLogs
func testWhiteSpace1() {
    line1, line2, line3, line4 = whiteSpaceLines(1, "normal")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This"
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "+"
    box3, = line3.children
    text3, = box3.children
    assert text3.text == "is"
    box4, = line4.children
    text4, = box4.children
    assert text4.text == "text"
} 

@assertNoLogs
func testWhiteSpace2() {
    line1, line2 = whiteSpaceLines(1, "pre")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This +    "
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "    is text"
} 

@assertNoLogs
func testWhiteSpace3() {
    line1, = whiteSpaceLines(1, "nowrap")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This + is text"
} 

@assertNoLogs
func testWhiteSpace4() {
    line1, line2, line3, line4, line5 = whiteSpaceLines(1, "pre-wrap")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This "
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "+    "
    box3, = line3.children
    text3, = box3.children
    assert text3.text == "    "
    box4, = line4.children
    text4, = box4.children
    assert text4.text == "is "
    box5, = line5.children
    text5, = box5.children
    assert text5.text == "text"
} 

@assertNoLogs
func testWhiteSpace5() {
    line1, line2, line3, line4 = whiteSpaceLines(1, "pre-line")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This"
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "+"
    box3, = line3.children
    text3, = box3.children
    assert text3.text == "is"
    box4, = line4.children
    text4, = box4.children
    assert text4.text == "text"
} 

@assertNoLogs
func testWhiteSpace6() {
    line1, = whiteSpaceLines(1000000, "normal")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This + is text"
} 

@assertNoLogs
func testWhiteSpace7() {
    line1, line2 = whiteSpaceLines(1000000, "pre")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This +    "
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "    is text"
} 

@assertNoLogs
func testWhiteSpace8() {
    line1, = whiteSpaceLines(1000000, "nowrap")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This + is text"
} 

@assertNoLogs
func testWhiteSpace9() {
    line1, line2 = whiteSpaceLines(1000000, "pre-wrap")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This +    "
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "    is text"
} 

@assertNoLogs
func testWhiteSpace10() {
    line1, line2 = whiteSpaceLines(1000000, "pre-line")
    box1, = line1.children
    text1, = box1.children
    assert text1.text == "This +"
    box2, = line2.children
    text2, = box2.children
    assert text2.text == "is text"
} 

@assertNoLogs
func testWhiteSpace11() {
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/813
    page, = renderPages("""
      <style>
        pre { width: 0 }
      </style>
      <body><pre>This<br/>is text""")
    html, = page.children
    body, = html.children
    pre, = body.children
    line1, line2 = pre.children
    text1, box = line1.children
    assert text1.text == "This"
    assert box.elementTag == "br"
    text2, = line2.children
    assert text2.text == "is text"
} 

@assertNoLogs
func testWhiteSpace12() {
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/813
    page, = renderPages("""
      <style>
        pre { width: 0 }
      </style>
      <body><pre>This is <span>lol</span> text""")
    html, = page.children
    body, = html.children
    pre, = body.children
    line1, = pre.children
    text1, span, text2 = line1.children
    assert text1.text == "This is "
    assert span.elementTag == "span"
    assert text2.text == " text"
} 

@assertNoLogs
@pytest.mark.parametrize("value, width", (
    (8, 144),  // (2 + (8 - 1)) * 16
    (4, 80),  // (2 + (4 - 1)) * 16
    ("3em", 64),  // (2 + (3 - 1)) * 16
    ("25px", 41),  // 2 * 16 + 25 - 1 * 16
    // (0, 32),  // See Layout.setTabs
))
func testTabSize(value, width) {
    page, = renderPages("""
      <style>
        @font-face {src: url(weasyprint.otf); font-family: weasyprint}
        pre { tab-size: %s; font-family: weasyprint }
      </style>
      <pre>a&#9;a</pre>
    """ % value)
    html, = page.children
    body, = html.children
    paragraph, = body.children
    line, = paragraph.children
    assert line.width == width


@assertNoLogs
func testTextTransform():
    page, = renderPages("""
      <style>
        p { text-transform: capitalize }
        p+p { text-transform: uppercase }
        p+p+p { text-transform: lowercase }
        p+p+p+p { text-transform: full-width }
        p+p+p+p+p { text-transform: none }
      </style>
<p>hé lO1</p><p>hé lO1</p><p>hé lO1</p><p>hé lO1</p><p>hé lO1</p>
    """)
    html, = page.children
    body, = html.children
    p1, p2, p3, p4, p5 = body.children
    line1, = p1.children
    text1, = line1.children
    assert text1.text == "Hé Lo1"
    line2, = p2.children
    text2, = line2.children
    assert text2.text == "HÉ LO1"
    line3, = p3.children
    text3, = line3.children
    assert text3.text == "hé lo1"
    line4, = p4.children
    text4, = line4.children
    assert text4.text == "\uff48é\u3000\uff4c\uff2f\uff11"
    line5, = p5.children
    text5, = line5.children
    assert text5.text == "hé lO1"
} 

@assertNoLogs
func testTextFloatingPreLine() {
    // Test regression: https://github.com/Kozea/WeasyPrint/issues/610
    page, = renderPages("""
      <div style="float: left; white-space: pre-line">This is
      oh this end </div>
    """)


@assertNoLogs
@pytest.mark.parametrize(
    "leader, content", (
        ("dotted", "."),
        ("solid", ""),
        ("space", " "),
        ("" .-"", " .-"),
    )
)
func testLeaderContent(leader, content):
    page, = renderPages("""
      <style>div::after { content: leader(%s) }</style>
      <div></div>
    """ % leader)
    html, = page.children
    body, = html.children
    div, = body.children
    line, = div.children
    after, = line.children
    inline, = after.children
    assert inline.children[0].text == content
} 

@pytest.mark.xfail
@assertNoLogs
func testMaxLines() {
    page, = renderPages("""
      <style>
        @page {size: 10px 10px;}
        @font-face {src: url(weasyprint.otf); font-family: weasyprint}
        p {
          font-family: weasyprint;
          font-size: 2px;
          max-lines: 2;
        }
      </style>
      <p>
        abcd efgh ijkl
      </p>
    """)
    html, = page.children
    body, = html.children
    p1, p2 = body.children
    line1, line2 = p1.children
    line3, = p2.children
    text1, = line1.children
    text2, = line2.children
    text3, = line3.children
    assert text1.text == "abcd"
    assert text2.text == "efgh"
    assert text3.text == "ijkl"


@assertNoLogs
func testContinue():
    page, = renderPages("""
      <style>
        @page {size: 10px 4px;}
        @font-face {src: url(weasyprint.otf); font-family: weasyprint}
        div {
          continue: discard;
          font-family: weasyprint;
          font-size: 2px;
        }
      </style>
      <div>
        abcd efgh ijkl
      </div>
    """)
    html, = page.children
    body, = html.children
    p, = body.children
    line1, line2 = p.children
    text1, = line1.children
    text2, = line2.children
    assert text1.text == "abcd"
    assert text2.text == "efgh"
