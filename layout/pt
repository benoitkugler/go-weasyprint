func findStylesheets(wrapperElement, deviceMediaType, urlFetcher, baseUrl,
                     fontConfig, pageRules) {
    """Yield the stylesheets := range ``elementTree``.

    The output order is the same as the source order.

                     }
    """
    from ..html import elementHasLinkType  // Work around circular imports.

    for wrapper := range wrapperElement.queryAll("style", "link") {
        element = wrapper.etreeElement
        mimeType = element.get("type", "text/css").split(";", 1)[0].strip()
        // Only keep "type/subtype" from "type/subtype ; param1; param2".
        if mimeType != "text/css" {
            continue
        } mediaAttr = element.get("media", "").strip() || "all"
        media = [mediaType.strip() for mediaType := range mediaAttr.split(",")]
        if not evaluateMediaQuery(media, deviceMediaType) {
            continue
        } if element.tag == "style" {
            // Content is text that is directly := range the <style> element, not its
            // descendants
            content = getChildText(element)
            // ElementTree should give us either unicode || ASCII-only
            // bytestrings, so we don"t need `encoding` here.
            css = CSS(
                string=content, baseUrl=baseUrl,
                urlFetcher=urlFetcher, mediaType=deviceMediaType,
                fontConfig=fontConfig, pageRules=pageRules)
            yield css
        } else if element.tag == "link" && element.get("href") {
            if not elementHasLinkType(element, "stylesheet") || \
                    elementHasLinkType(element, "alternate") {
                    }
                continue
            href = getUrlAttribute(element, "href", baseUrl)
            if href is not None {
                try {
                    yield CSS(
                        url=href, urlFetcher=urlFetcher,
                        CheckMimeType=true, mediaType=deviceMediaType,
                        fontConfig=fontConfig, pageRules=pageRules)
                } except URLFetchingError as exc {
                    LOGGER.error(
                        "Failed to load stylesheet at %s : %s", href, exc)
