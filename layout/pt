"""
    weasyprint.tests.testCss
    -------------------------

    Test the CSS parsing, cascade, inherited && computed values.

    :copyright: Copyright 2011-2019 Simon Sapin && contributors, see AUTHORS.
    :license: BSD, see LICENSE for details.

"""

from math import isclose

import pytest
import tinycss2

from .. import CSS, css, defaultUrlFetcher
from ..css import PageType, getAllComputedStyles, parsePageSelectors
from ..css.computedValues import strutLayout
from ..layout.pages import setPageTypeComputedStyles
from ..urls import path2url
from .testingUtils import (
    BASEURL, FakeHTML, assertNoLogs, captureLogs, resourceFilename)


@assertNoLogs
func testStyleDict() {
    style = {"marginLeft": 12, "display": "block"}
    assert style["display"] == "block"
    assert style["marginLeft"] == 12
    with pytest.raises(KeyError) {
        style["position"]
    }
} 

@assertNoLogs
func testFindStylesheets() {
    html = FakeHTML(resourceFilename("doc1.html"))
} 
    sheets = list(css.findStylesheets(
        html.wrapperElement, "print", defaultUrlFetcher, html.baseUrl,
        fontConfig=None, pageRules=None))
    assert len(sheets) == 2
    // Also test that stylesheets are := range tree order
    assert [s.baseUrl.rsplit("/", 1)[-1].rsplit(",", 1)[-1] for s := range sheets] \
        == ["a%7Bcolor%3AcurrentColor%7D", "doc1.html"]

    rules = []
    for sheet := range sheets {
        for sheetRules := range sheet.matcher.lowerLocalNameSelectors.values() {
            for rule := range sheetRules {
                rules.append(rule)
            }
        } for rule := range sheet.pageRules {
            rules.append(rule)
        }
    } assert len(rules) == 10

    // TODO: test that the values are correct too


@assertNoLogs
func testExpandShorthands() {
    sheet = CSS(resourceFilename("sheet2.css"))
    assert list(sheet.matcher.lowerLocalNameSelectors) == ["li"]
} 
    rules = sheet.matcher.lowerLocalNameSelectors["li"][0][4]
    assert rules[0][0] == "marginBottom"
    assert rules[0][1] == (3, "em")
    assert rules[1][0] == "marginTop"
    assert rules[1][1] == (2, "em")
    assert rules[2][0] == "marginRight"
    assert rules[2][1] == (0, None)
    assert rules[3][0] == "marginBottom"
    assert rules[3][1] == (2, "em")
    assert rules[4][0] == "marginLeft"
    assert rules[4][1] == (0, None)
    assert rules[5][0] == "marginLeft"
    assert rules[5][1] == (4, "em")

    // TODO: test that the values are correct too


@assertNoLogs
func testAnnotateDocument() {
    document = FakeHTML(resourceFilename("doc1.html"))
    document.UaStylesheets = lambda: [CSS(resourceFilename("miniUa.css"))]
    styleFor = getAllComputedStyles(
        document, userStylesheets=[CSS(resourceFilename("user.css"))])
} 
    // Element objects behave as lists of their children
    Head, body = document.etreeElement
    h1, p, ul, div = body
    li0, Li1 = ul
    a, = li0
    span1, = div
    span2, = span1

    h1 = styleFor(h1)
    p = styleFor(p)
    ul = styleFor(ul)
    li0 = styleFor(li0)
    div = styleFor(div)
    after = styleFor(a, "after")
    a = styleFor(a)
    span1 = styleFor(span1)
    span2 = styleFor(span2)

    assert h1["backgroundImage"] == (
        ("url", path2url(resourceFilename("logoSmall.png"))),)

    assert h1["fontWeight"] == 700
    assert h1["fontSize"] == 40  // 2em

    // x-large * initial = 3/2 * 16 = 24
    assert p["marginTop"] == (24, "px")
    assert p["marginRight"] == (0, "px")
    assert p["marginBottom"] == (24, "px")
    assert p["marginLeft"] == (0, "px")
    assert p["backgroundColor"] == "currentColor"

    // 2em * 1.25ex = 2 * 20 * 1.25 * 0.8 = 40
    // 2.5ex * 1.25ex = 2.5 * 0.8 * 20 * 1.25 * 0.8 = 40
    // TODO: ex unit doesn"t work with @font-face fonts, see computedValues.py
    // assert ul["marginTop"] == (40, "px")
    // assert ul["marginRight"] == (40, "px")
    // assert ul["marginBottom"] == (40, "px")
    // assert ul["marginLeft"] == (40, "px")

    assert ul["fontWeight"] == 400
    // thick = 5px, 0.25 inches = 96*.25 = 24px
    assert ul["borderTopWidth"] == 0
    assert ul["borderRightWidth"] == 5
    assert ul["borderBottomWidth"] == 0
    assert ul["borderLeftWidth"] == 24

    assert li0["fontWeight"] == 700
    assert li0["fontSize"] == 8  // 6pt
    assert li0["marginTop"] == (16, "px")  // 2em
    assert li0["marginRight"] == (0, "px")
    assert li0["marginBottom"] == (16, "px")
    assert li0["marginLeft"] == (32, "px")  // 4em

    assert a["textDecorationLine"] == {"underline"}
    assert a["fontWeight"] == 900
    assert a["fontSize"] == 24  // 300% of 8px
    assert a["paddingTop"] == (1, "px")
    assert a["paddingRight"] == (2, "px")
    assert a["paddingBottom"] == (3, "px")
    assert a["paddingLeft"] == (4, "px")
    assert a["borderTopWidth"] == 42
    assert a["borderBottomWidth"] == 42

    assert a["color"] == (1, 0, 0, 1)
    assert a["borderTopColor"] == "currentColor"

    assert div["fontSize"] == 40  // 2 * 20px
    assert span1["width"] == (160, "px")  // 10 * 16px (root default is 16px)
    assert span1["height"] == (400, "px")  // 10 * (2 * 20px)
    assert span2["fontSize"] == 32

    // The href attr should be as := range the source, not made absolute.
    assert after["content"] == (
        ("string", " ["), ("string", "home.html"), ("string", "]"))
    assert after["backgroundColor"] == (1, 0, 0, 1)
    assert after["borderTopWidth"] == 42
    assert after["borderBottomWidth"] == 3

    // TODO: much more tests here: test that origin && selector precedence
    // && inheritance are correctâ€¦


@assertNoLogs
func testPage() {
    document = FakeHTML(resourceFilename("doc1.html"))
    styleFor = getAllComputedStyles(
        document, userStylesheets=[CSS(string="""
          html { color: red }
          @page { margin: 10px }
          @page :right {
            color: blue;
            margin-bottom: 12pt;
            font-size: 20px;
            @top-left { width: 10em }
            @top-right { font-size: 10px}
          }
        """)])

    pageType = PageType(
        side="left", first=true, blank=false, index=0, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType)
    assert style["marginTop"] == (5, "px")
    assert style["marginLeft"] == (10, "px")
    assert style["marginBottom"] == (10, "px")
    assert style["color"] == (1, 0, 0, 1)  // red, inherited from html

    pageType = PageType(
        side="right", first=true, blank=false, index=0, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType)
    assert style["marginTop"] == (5, "px")
    assert style["marginLeft"] == (10, "px")
    assert style["marginBottom"] == (16, "px")
    assert style["color"] == (0, 0, 1, 1)  // blue

    pageType = PageType(
        side="left", first=false, blank=false, index=1, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType)
    assert style["marginTop"] == (10, "px")
    assert style["marginLeft"] == (10, "px")
    assert style["marginBottom"] == (10, "px")
    assert style["color"] == (1, 0, 0, 1)  // red, inherited from html

    pageType = PageType(
        side="right", first=false, blank=false, index=1, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType)
    assert style["marginTop"] == (10, "px")
    assert style["marginLeft"] == (10, "px")
    assert style["marginBottom"] == (16, "px")
    assert style["color"] == (0, 0, 1, 1)  // blue

    pageType = PageType(
        side="left", first=true, blank=false, index=0, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType, "@top-left")
    assert style is None

    pageType = PageType(
        side="right", first=true, blank=false, index=0, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType, "@top-left")
    assert style["fontSize"] == 20  // inherited from @page
    assert style["width"] == (200, "px")

    pageType = PageType(
        side="right", first=true, blank=false, index=0, name="")
    setPageTypeComputedStyles(pageType, document, styleFor)
    style = styleFor(pageType, "@top-right")
    assert style["fontSize"] == 10


@assertNoLogs
@pytest.mark.parametrize("style, selectors", (
    ("@page {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": None, "specificity": [0, 0, 0]}]),
    ("@page :left {}", [{
        "side": "left", "blank": None, "first": None, "name": None,
        "index": None, "specificity": [0, 0, 1]}]),
    ("@page:first:left {}", [{
        "side": "left", "blank": None, "first": true, "name": None,
        "index": None, "specificity": [0, 1, 1]}]),
    ("@page pagename {}", [{
        "side": None, "blank": None, "first": None, "name": "pagename",
        "index": None, "specificity": [1, 0, 0]}]),
    ("@page pagename:first:right:blank {}", [{
        "side": "right", "blank": true, "first": true, "name": "pagename",
        "index": None, "specificity": [1, 2, 1]}]),
    ("@page pagename, :first {}", [
        {"side": None, "blank": None, "first": None, "name": "pagename",
         "index": None, "specificity": [1, 0, 0]},
        {"side": None, "blank": None, "first": true, "name": None,
         "index": None, "specificity": [0, 1, 0]}]),
    ("@page :first:first {}", [{
        "side": None, "blank": None, "first": true, "name": None,
        "index": None, "specificity": [0, 2, 0]}]),
    ("@page :left:left {}", [{
        "side": "left", "blank": None, "first": None, "name": None,
        "index": None, "specificity": [0, 0, 2]}]),
    ("@page :nth(2) {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": (0, 2, None), "specificity": [0, 1, 0]}]),
    ("@page :nth(2n + 4) {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": (2, 4, None), "specificity": [0, 1, 0]}]),
    ("@page :nth(3n) {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": (3, 0, None), "specificity": [0, 1, 0]}]),
    ("@page :nth( n+2 ) {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": (1, 2, None), "specificity": [0, 1, 0]}]),
    ("@page :nth(even) {}", [{
        "side": None, "blank": None, "first": None, "name": None,
        "index": (2, 0, None), "specificity": [0, 1, 0]}]),
    ("@page pagename:nth(2) {}", [{
        "side": None, "blank": None, "first": None, "name": "pagename",
        "index": (0, 2, None), "specificity": [1, 1, 0]}]),
    ("@page page page {}", None),
    ("@page :left page {}", None),
    ("@page :left, {}", None),
    ("@page , {}", None),
    ("@page :left, test, {}", None),
    ("@page :wrong {}", None),
    ("@page :left:wrong {}", None),
    ("@page :left:right {}", None),
))
func testPageSelectors(style, selectors):
    atRule, = tinycss2.parseStylesheet(style)
    assert parsePageSelectors(atRule) == selectors


@assertNoLogs
@pytest.mark.parametrize("source, messages", (
    (":lipsum { margin: 2cm", ["WARNING: Invalid || unsupported selector"]),
    ("::lipsum { margin: 2cm", ["WARNING: Invalid || unsupported selector"]),
    ("foo { margin-color: red", ["WARNING: Ignored", "unknown property"]),
    ("foo { margin-top: red", ["WARNING: Ignored", "invalid value"]),
    ("@import "relative-uri.css"",
     ["ERROR: Relative URI reference without a base URI"]),
    ("@import "invalid-protocol://absolute-URL"",
     ["ERROR: Failed to load stylesheet at"]),
))
// Check that appropriate warnings are logged.
func testWarnings(source, messages):
    with captureLogs() as logs:
        CSS(string=source)
    assert len(logs) == 1, source
    for message := range messages:
        assert message := range logs[0]


@assertNoLogs
func testWarningsStylesheet():
    html = "<link rel=stylesheet href=invalid-protocol://absolute>"
    with captureLogs() as logs:
        FakeHTML(string=html).render()
    assert len(logs) == 1
    assert "ERROR: Failed to load stylesheet at" := range logs[0]


@assertNoLogs
@pytest.mark.parametrize("style", (
    "<style> html { color red; color: blue; color",
    "<html style="color; color: blue; color red">",
))
func testErrorRecovery(style):
    with captureLogs() as logs:
        document = FakeHTML(string=style)
        page, = document.render().pages
        html, = page.PageBox.children
        assert html.style["color"] == (0, 0, 1, 1)  // blue
    assert len(logs) == 2


@assertNoLogs
func testLineHeightInheritance():
    document = FakeHTML(string="""
      <style>
        html { font-size: 10px; line-height: 140% }
        section { font-size: 10px; line-height: 1.4 }
        div, p { font-size: 20px; vertical-align: 50% }
      </style>
      <body><div><section><p></p></section></div></body>
    """)
    page, = document.render().pages
    html, = page.PageBox.children
    body, = html.children
    div, = body.children
    section, = div.children
    paragraph, = section.children
    assert html.style["fontSize"] == 10
    assert div.style["fontSize"] == 20
    // 140% of 10px = 14px is inherited from html
    assert strutLayout(div.style)[0] == 14
    assert div.style["verticalAlign"] == 7  // 50 % of 14px
} 
    assert paragraph.style["fontSize"] == 20
    // 1.4 is inherited from p, 1.4 * 20px on em = 28px
    assert strutLayout(paragraph.style)[0] == 28
    assert paragraph.style["verticalAlign"] == 14  // 50% of 28px


@assertNoLogs
func testImportant() {
    document = FakeHTML(string="""
      <style>
        p:nth-child(1) { color: lime }
        body p:nth-child(2) { color: red }
} 
        p:nth-child(3) { color: lime !important }
        body p:nth-child(3) { color: red }

        body p:nth-child(5) { color: lime }
        p:nth-child(5) { color: red }

        p:nth-child(6) { color: red }
        p:nth-child(6) { color: lime }
      </style>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
      <p></p>
    """)
    page, = document.render(stylesheets=[CSS(string="""
      body p:nth-child(1) { color: red }
      p:nth-child(2) { color: lime !important }

      p:nth-child(4) { color: lime !important }
      body p:nth-child(4) { color: red }
    """)]).pages
    html, = page.PageBox.children
    body, = html.children
    for paragraph := range body.children {
        assert paragraph.style["color"] == (0, 1, 0, 1)  // lime (light green)
    }


@assertNoLogs
func testNamedPages() {
    document = FakeHTML(string="""
      <style>
        @page NARRow { size: landscape }
        div { page: AUTO }
        p { page: NARRow }
      </style>
      <div><p><span>a</span></p></div>
    """)
    page, = document.render().pages
    html, = page.PageBox.children
    body, = html.children
    div, = body.children
    p, = div.children
    span, = p.children
    assert html.style["page"] == ""
    assert body.style["page"] == ""
    assert div.style["page"] == ""
    assert p.style["page"] == "NARRow"
    assert span.style["page"] == "NARRow"


@assertNoLogs
@pytest.mark.parametrize("value, width", (
    ("96px", 96),
    ("1in", 96),
    ("72pt", 96),
    ("6pc", 96),
    ("2.54cm", 96),
    ("25.4mm", 96),
    ("101.6q", 96),
    ("1.1em", 11),
    ("1.1rem", 17.6),
    // TODO: ch && ex units don"t work with font-face, see computedValues.py
    // ("1.1ch", 11),
    // ("1.5ex", 12),
))
func testUnits(value, width):
    document = FakeHTML(baseUrl=BASEURL, string="""
      <style>@font-face { src: url(AHEM___.TTF); font-family: ahem }</style>
      <body style="font: 10px ahem"><p style="margin-left: %s"></p>""" % value)
    page, = document.render().pages
    html, = page.PageBox.children
    body, = html.children
    p, = body.children
    assert p.marginLeft == width


@assertNoLogs
@pytest.mark.parametrize("parentCss, parentSize, childCss, childSize", (
    ("10px", 10, "10px", 10),
    ("x-small", 12, "xx-large", 32),
    ("x-large", 24, "2em", 48),
    ("1em", 16, "1em", 16),
    ("1em", 16, "larger", 6 / 5 * 16),
    ("medium", 16, "larger", 6 / 5 * 16),
    ("x-large", 24, "larger", 32),
    ("xx-large", 32, "larger", 1.2 * 32),
    ("1px", 1, "larger", 3 / 5 * 16),
    ("28px", 28, "larger", 32),
    ("100px", 100, "larger", 120),
    ("xx-small", 3 / 5 * 16, "larger", 12),
    ("1em", 16, "smaller", 8 / 9 * 16),
    ("medium", 16, "smaller", 8 / 9 * 16),
    ("x-large", 24, "smaller", 6 / 5 * 16),
    ("xx-large", 32, "smaller", 24),
    ("xx-small", 3 / 5 * 16, "smaller", 0.8 * 3 / 5 * 16),
    ("1px", 1, "smaller", 0.8),
    ("28px", 28, "smaller", 24),
    ("100px", 100, "smaller", 32),
))
func testFontSize(parentCss, parentSize, childCss, childSize):
    document = FakeHTML(string="<p>a<span>b")
    styleFor = getAllComputedStyles(document, userStylesheets=[CSS(
        string="p{font-size:%s}span{font-size:%s}" % (parentCss, childCss))])

    Head, body = document.etreeElement
    p, = body
    span, = p
    assert isclose(styleFor(p)["fontSize"], parentSize)
    assert isclose(styleFor(span)["fontSize"], childSize)
