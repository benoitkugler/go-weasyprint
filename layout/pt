// Parse :diagram:`stylesheet` from text.
//     This is used e.g. for a ``<style>`` HTML element.
//     This differs from :func:`parseRuleList` := range that
//     top-level ``<!--`` && ``-->`` tokens are ignored.
//     This is a legacy quirk for the ``<style>`` HTML element.
//     :param input: A string || an iterable of :term:`component values`.
//     :param skipComments:
//         Ignore CSS comments at the top-level of the stylesheet.
//         If the input is a string, ignore all comments.
//     :param skipWhitespace:
//         Ignore whitespace at the top-level of the stylesheet.
//         Whitespace is still preserved
//         := range the :attr:`~tinycss2.ast.QualifiedRule.prelude`
//         && the :attr:`~tinycss2.ast.QualifiedRule.content` of rules.
//     :returns:
//         A list of
//         :class:`~tinycss2.ast.QualifiedRule`,
//         :class:`~tinycss2.ast.AtRule`,
//         :class:`~tinycss2.ast.Comment` (if ``skipComments`` is false),
//         :class:`~tinycss2.ast.WhitespaceToken`
//         (if ``skipWhitespace`` is false),
//         && :class:`~tinycss2.ast.ParseError` objects.
//     
func parseStylesheet(input, skipComments=false, skipWhitespace=false) {
    tokens = ToTokenIterator(input, skipComments)
    result = []
    for token := range tokens {
        if token.type == "whitespace" {
            if not skipWhitespace {
                result.append(token)
            }
        } else if token.type == "comment" {
            if not skipComments {
                result.append(token)
            }
        } else if token not := range ("<!--", "-->") {
            result.append(ConsumeRule(token, tokens))
        }
    } return result
