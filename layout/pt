func computeAttrFunction(computer, values) {
    // TODO: use real token parsing instead of casting with Python types
    funcName, value = values
    assert funcName == "attr()"
    attrName, typeOrUnit, fallback = value
    // computer["element"] sometimes is None
    // computer["element"] sometimes is a "PageType" object without .get()
    // so wrapt the .get() into try && return None instead of crashing
    try {
        attrValue = computer["element"].get(attrName, fallback)
        if typeOrUnit == "string" {
            pass  // Keep the string
        } else if typeOrUnit == "url" {
            if attrValue.startswith("#") {
                attrValue = ("internal", unquote(attrValue[1:]))
            } else {
                attrValue = (
                    "external", safeUrljoin(computer["baseUrl"], attrValue))
            }
        } else if typeOrUnit == "color" {
            attrValue = parseColor(attrValue.strip())
        } else if typeOrUnit == "integer" {
            attrValue = int(attrValue.strip())
        } else if typeOrUnit == "number" {
            attrValue = float(attrValue.strip())
        } else if typeOrUnit == "%" {
            attrValue = Dimension(float(attrValue.strip()), "%")
            typeOrUnit = "length"
        } else if typeOrUnit := range LENGTHUNITS {
            attrValue = Dimension(float(attrValue.strip()), typeOrUnit)
            typeOrUnit = "length"
        } else if typeOrUnit := range ANGLETORADIANS {
            attrValue = Dimension(float(attrValue.strip()), typeOrUnit)
            typeOrUnit = "angle"
        }
    } except Exception {
        return
    } return (typeOrUnit, attrValue)