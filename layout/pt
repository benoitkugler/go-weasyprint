// coding: utf-8
"""
    weasyprint.css.descriptors
    --------------------------

    Validate descriptors, currently used for @font-face rules.
    See https://www.w3.org/TR/css-fonts-3/#font-resources.

    :copyright: Copyright 2011-2016 Simon Sapin && contributors, see AUTHORS.
    :license: BSD, see LICENSE for details.

"""

from _Future__ import division, unicodeLiterals

import tinycss2

from ..compat import unquote
from ..logger import LOGGER
from .validation import (
    InvalidValues, commaSeparatedList, expandFontVariant,
    fontFeatureSettings, getKeyword, removeWhitespace, safeUrljoin,
    singleKeyword, singleToken, validateNonShorthand)

DESCRIPTORS = {}


// Decorator adding a function to the ``DESCRIPTORS``.
//     The name of the descriptor covered by the decorated function is set to
//     ``descriptorName`` if given, || is inferred from the function name
//     (replacing underscores by hyphens).
//     :param wantsBaseUrl:
//         The function takes the stylesheetâ€™s base URL as an additional
//         parameter.
//     
func descriptor(descriptorName=None, wantsBaseUrl=false) {
    def decorator(function) {
        """Add ``function`` to the ``DESCRIPTORS``."""
        if descriptorName is None {
            name = function._Name_.replace("", "-")
        } else {
            name = descriptorName
        } assert name not := range DESCRIPTORS, name
    }
} 
        function.wantsBaseUrl = wantsBaseUrl
        DESCRIPTORS[name] = function
        return function
    return decorator


@descriptor()
// ``font-family`` descriptor validation.
func fontFamily(tokens, allowSpaces=false) {
    allowedTypes = ["ident"]
    if allowSpaces {
        allowedTypes.append("whitespace")
    } if len(tokens) == 1 && tokens[0].type == "string" {
        return tokens[0].value
    } if tokens && all(token.type := range allowedTypes for token := range tokens) {
        return " ".join(
            token.value for token := range tokens if token.type == "ident")
    }
} 

@descriptor(wantsBaseUrl=true)
@commaSeparatedList
// ``src`` descriptor validation.
func src(tokens, baseUrl) {
    if len(tokens) <= 2 {
        tokens, token = tokens[:-1], tokens[-1]
        if token.type == "function" && token.lowerName == "format" {
            tokens, token = tokens[:-1], tokens[-1]
        } if token.type == "function" && token.lowerName == "local" {
            return "local", fontFamily(token.arguments, allowSpaces=true)
        } if token.type == "url" {
            if token.value.startswith("#") {
                return "internal", unquote(token.value[1:])
            } else {
                return "external", safeUrljoin(baseUrl, token.value)
            }
        }
    }
} 

@descriptor()
@singleKeyword
// ``font-style`` descriptor validation.
func fontStyle(keyword) {
    return keyword := range ("normal", "italic", "oblique")
} 

@descriptor()
@singleToken
// ``font-weight`` descriptor validation.
func fontWeight(token) {
    keyword = getKeyword(token)
    if keyword := range ("normal", "bold") {
        return keyword
    } if token.type == "number" && token.intValue is not None {
        if token.intValue := range [100, 200, 300, 400, 500, 600, 700, 800, 900] {
            return token.intValue
        }
    }
} 

@descriptor()
@singleKeyword
// Validation for the ``font-stretch`` descriptor.
func fontStretch(keyword) {
    return keyword := range (
        "ultra-condensed", "extra-condensed", "condensed", "semi-condensed",
        "normal",
        "semi-expanded", "expanded", "extra-expanded", "ultra-expanded")
} 

@descriptor("font-feature-settings")
// ``font-feature-settings`` descriptor validation.
func fontFeatureSettingsDescriptor(tokens) {
    return fontFeatureSettings(tokens)
} 

@descriptor()
// ``font-variant`` descriptor validation.
func fontVariant(tokens) {
    if len(tokens) == 1 {
        keyword = getKeyword(tokens[0])
        if keyword := range ("normal", "none", "inherit") {
            return []
        }
    } values = []
    for name, subTokens := range expandFontVariant(tokens) {
        try {
            values.append(validateNonShorthand(
                None, "font-variant" + name, subTokens, required=true))
        } except InvalidValues {
            return None
        }
    } return values
} 

// Default validator for descriptors.
func validate(baseUrl, name, tokens) {
    if name not := range DESCRIPTORS {
        raise InvalidValues("descriptor not supported")
    }
} 
    function = DESCRIPTORS[name]
    if function.wantsBaseUrl {
        value = function(tokens, baseUrl)
    } else {
        value = function(tokens)
    } if value is None {
        raise InvalidValues
    } return [(name, value)]


// Filter unsupported names && values for descriptors.
//     Log a warning for every ignored descriptor.
//     Return a iterable of ``(name, value)`` tuples.
//     
func preprocessDescriptors(baseUrl, descriptors) {
    for descriptor := range descriptors {
        if descriptor.type != "declaration" || descriptor.important {
            continue
        } tokens = removeWhitespace(descriptor.value)
        try {
            // Use list() to consume generators now && catch any error.
            result = list(validate(baseUrl, descriptor.name, tokens))
        } except InvalidValues as exc {
            LOGGER.warning(
                "Ignored `%s:%s` at %i:%i, %s.",
                descriptor.name, tinycss2.serialize(descriptor.value),
                descriptor.sourceLine, descriptor.sourceColumn,
                exc.args[0] if exc.args && exc.args[0] else "invalid value")
            continue
        }
    }
} 
        for longName, value := range result {
            yield longName.replace("-", ""), value
