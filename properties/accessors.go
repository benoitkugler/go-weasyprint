package properties

// autogenerated from initial_values.go

func (s Properties) GetBottom() (kind CssKind, out Value) {
	inter := s["bottom"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBottom(v Value) {
	s["bottom"] = v
}

func (s Properties) GetCaptionSide() (kind CssKind, out String) {
	inter := s["caption_side"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetCaptionSide(v String) {
	s["caption_side"] = v
}

func (s Properties) GetClear() (kind CssKind, out String) {
	inter := s["clear"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetClear(v String) {
	s["clear"] = v
}

func (s Properties) GetClip() (kind CssKind, out Values) {
	inter := s["clip"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetClip(v Values) {
	s["clip"] = v
}

func (s Properties) GetColor() (kind CssKind, out Color) {
	inter := s["color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetColor(v Color) {
	s["color"] = v
}

func (s Properties) GetCounterIncrement() (kind CssKind, out SIntStrings) {
	inter := s["counter_increment"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SIntStrings)
}
func (s Properties) SetCounterIncrement(v SIntStrings) {
	s["counter_increment"] = v
}

func (s Properties) GetCounterReset() (kind CssKind, out IntStrings) {
	inter := s["counter_reset"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(IntStrings)
}
func (s Properties) SetCounterReset(v IntStrings) {
	s["counter_reset"] = v
}

func (s Properties) GetDirection() (kind CssKind, out String) {
	inter := s["direction"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetDirection(v String) {
	s["direction"] = v
}

func (s Properties) GetDisplay() (kind CssKind, out String) {
	inter := s["display"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetDisplay(v String) {
	s["display"] = v
}

func (s Properties) GetEmptyCells() (kind CssKind, out String) {
	inter := s["empty_cells"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetEmptyCells(v String) {
	s["empty_cells"] = v
}

func (s Properties) GetFloat() (kind CssKind, out String) {
	inter := s["float"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFloat(v String) {
	s["float"] = v
}

func (s Properties) GetHeight() (kind CssKind, out Value) {
	inter := s["height"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetHeight(v Value) {
	s["height"] = v
}

func (s Properties) GetLeft() (kind CssKind, out Value) {
	inter := s["left"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetLeft(v Value) {
	s["left"] = v
}

func (s Properties) GetRight() (kind CssKind, out Value) {
	inter := s["right"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetRight(v Value) {
	s["right"] = v
}

func (s Properties) GetLineHeight() (kind CssKind, out Value) {
	inter := s["line_height"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetLineHeight(v Value) {
	s["line_height"] = v
}

func (s Properties) GetListStyleImage() (kind CssKind, out Image) {
	inter := s["list_style_image"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Image)
}
func (s Properties) SetListStyleImage(v Image) {
	s["list_style_image"] = v
}

func (s Properties) GetListStylePosition() (kind CssKind, out String) {
	inter := s["list_style_position"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetListStylePosition(v String) {
	s["list_style_position"] = v
}

func (s Properties) GetListStyleType() (kind CssKind, out String) {
	inter := s["list_style_type"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetListStyleType(v String) {
	s["list_style_type"] = v
}

func (s Properties) GetMarginTop() (kind CssKind, out Value) {
	inter := s["margin_top"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMarginTop(v Value) {
	s["margin_top"] = v
}

func (s Properties) GetMarginRight() (kind CssKind, out Value) {
	inter := s["margin_right"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMarginRight(v Value) {
	s["margin_right"] = v
}

func (s Properties) GetMarginBottom() (kind CssKind, out Value) {
	inter := s["margin_bottom"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMarginBottom(v Value) {
	s["margin_bottom"] = v
}

func (s Properties) GetMarginLeft() (kind CssKind, out Value) {
	inter := s["margin_left"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMarginLeft(v Value) {
	s["margin_left"] = v
}

func (s Properties) GetMaxHeight() (kind CssKind, out Value) {
	inter := s["max_height"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMaxHeight(v Value) {
	s["max_height"] = v
}

func (s Properties) GetMaxWidth() (kind CssKind, out Value) {
	inter := s["max_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMaxWidth(v Value) {
	s["max_width"] = v
}

func (s Properties) GetPaddingTop() (kind CssKind, out Value) {
	inter := s["padding_top"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetPaddingTop(v Value) {
	s["padding_top"] = v
}

func (s Properties) GetPaddingRight() (kind CssKind, out Value) {
	inter := s["padding_right"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetPaddingRight(v Value) {
	s["padding_right"] = v
}

func (s Properties) GetPaddingBottom() (kind CssKind, out Value) {
	inter := s["padding_bottom"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetPaddingBottom(v Value) {
	s["padding_bottom"] = v
}

func (s Properties) GetPaddingLeft() (kind CssKind, out Value) {
	inter := s["padding_left"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetPaddingLeft(v Value) {
	s["padding_left"] = v
}

func (s Properties) GetPosition() (kind CssKind, out String) {
	inter := s["position"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetPosition(v String) {
	s["position"] = v
}

func (s Properties) GetTableLayout() (kind CssKind, out String) {
	inter := s["table_layout"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetTableLayout(v String) {
	s["table_layout"] = v
}

func (s Properties) GetTop() (kind CssKind, out Value) {
	inter := s["top"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetTop(v Value) {
	s["top"] = v
}

func (s Properties) GetUnicodeBidi() (kind CssKind, out String) {
	inter := s["unicode_bidi"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetUnicodeBidi(v String) {
	s["unicode_bidi"] = v
}

func (s Properties) GetVerticalAlign() (kind CssKind, out Value) {
	inter := s["vertical_align"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetVerticalAlign(v Value) {
	s["vertical_align"] = v
}

func (s Properties) GetVisibility() (kind CssKind, out String) {
	inter := s["visibility"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetVisibility(v String) {
	s["visibility"] = v
}

func (s Properties) GetWidth() (kind CssKind, out Value) {
	inter := s["width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetWidth(v Value) {
	s["width"] = v
}

func (s Properties) GetZIndex() (kind CssKind, out IntString) {
	inter := s["z_index"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(IntString)
}
func (s Properties) SetZIndex(v IntString) {
	s["z_index"] = v
}

func (s Properties) GetBackgroundAttachment() (kind CssKind, out Strings) {
	inter := s["background_attachment"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Strings)
}
func (s Properties) SetBackgroundAttachment(v Strings) {
	s["background_attachment"] = v
}

func (s Properties) GetBackgroundClip() (kind CssKind, out Strings) {
	inter := s["background_clip"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Strings)
}
func (s Properties) SetBackgroundClip(v Strings) {
	s["background_clip"] = v
}

func (s Properties) GetBackgroundColor() (kind CssKind, out Color) {
	inter := s["background_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetBackgroundColor(v Color) {
	s["background_color"] = v
}

func (s Properties) GetBackgroundImage() (kind CssKind, out Images) {
	inter := s["background_image"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Images)
}
func (s Properties) SetBackgroundImage(v Images) {
	s["background_image"] = v
}

func (s Properties) GetBackgroundOrigin() (kind CssKind, out Strings) {
	inter := s["background_origin"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Strings)
}
func (s Properties) SetBackgroundOrigin(v Strings) {
	s["background_origin"] = v
}

func (s Properties) GetBackgroundPosition() (kind CssKind, out Centers) {
	inter := s["background_position"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Centers)
}
func (s Properties) SetBackgroundPosition(v Centers) {
	s["background_position"] = v
}

func (s Properties) GetBackgroundRepeat() (kind CssKind, out Repeats) {
	inter := s["background_repeat"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Repeats)
}
func (s Properties) SetBackgroundRepeat(v Repeats) {
	s["background_repeat"] = v
}

func (s Properties) GetBackgroundSize() (kind CssKind, out Sizes) {
	inter := s["background_size"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Sizes)
}
func (s Properties) SetBackgroundSize(v Sizes) {
	s["background_size"] = v
}

func (s Properties) GetBorderBottomColor() (kind CssKind, out Color) {
	inter := s["border_bottom_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetBorderBottomColor(v Color) {
	s["border_bottom_color"] = v
}

func (s Properties) GetBorderLeftColor() (kind CssKind, out Color) {
	inter := s["border_left_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetBorderLeftColor(v Color) {
	s["border_left_color"] = v
}

func (s Properties) GetBorderRightColor() (kind CssKind, out Color) {
	inter := s["border_right_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetBorderRightColor(v Color) {
	s["border_right_color"] = v
}

func (s Properties) GetBorderTopColor() (kind CssKind, out Color) {
	inter := s["border_top_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetBorderTopColor(v Color) {
	s["border_top_color"] = v
}

func (s Properties) GetBorderBottomStyle() (kind CssKind, out String) {
	inter := s["border_bottom_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBorderBottomStyle(v String) {
	s["border_bottom_style"] = v
}

func (s Properties) GetBorderLeftStyle() (kind CssKind, out String) {
	inter := s["border_left_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBorderLeftStyle(v String) {
	s["border_left_style"] = v
}

func (s Properties) GetBorderRightStyle() (kind CssKind, out String) {
	inter := s["border_right_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBorderRightStyle(v String) {
	s["border_right_style"] = v
}

func (s Properties) GetBorderTopStyle() (kind CssKind, out String) {
	inter := s["border_top_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBorderTopStyle(v String) {
	s["border_top_style"] = v
}

func (s Properties) GetBorderCollapse() (kind CssKind, out String) {
	inter := s["border_collapse"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBorderCollapse(v String) {
	s["border_collapse"] = v
}

func (s Properties) GetBorderSpacing() (kind CssKind, out Point) {
	inter := s["border_spacing"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Point)
}
func (s Properties) SetBorderSpacing(v Point) {
	s["border_spacing"] = v
}

func (s Properties) GetBorderBottomWidth() (kind CssKind, out Value) {
	inter := s["border_bottom_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBorderBottomWidth(v Value) {
	s["border_bottom_width"] = v
}

func (s Properties) GetBorderLeftWidth() (kind CssKind, out Value) {
	inter := s["border_left_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBorderLeftWidth(v Value) {
	s["border_left_width"] = v
}

func (s Properties) GetBorderTopWidth() (kind CssKind, out Value) {
	inter := s["border_top_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBorderTopWidth(v Value) {
	s["border_top_width"] = v
}

func (s Properties) GetBorderRightWidth() (kind CssKind, out Value) {
	inter := s["border_right_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBorderRightWidth(v Value) {
	s["border_right_width"] = v
}

func (s Properties) GetBorderBottomLeftRadius() (kind CssKind, out Values) {
	inter := s["border_bottom_left_radius"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetBorderBottomLeftRadius(v Values) {
	s["border_bottom_left_radius"] = v
}

func (s Properties) GetBorderBottomRightRadius() (kind CssKind, out Values) {
	inter := s["border_bottom_right_radius"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetBorderBottomRightRadius(v Values) {
	s["border_bottom_right_radius"] = v
}

func (s Properties) GetBorderTopLeftRadius() (kind CssKind, out Values) {
	inter := s["border_top_left_radius"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetBorderTopLeftRadius(v Values) {
	s["border_top_left_radius"] = v
}

func (s Properties) GetBorderTopRightRadius() (kind CssKind, out Values) {
	inter := s["border_top_right_radius"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetBorderTopRightRadius(v Values) {
	s["border_top_right_radius"] = v
}

func (s Properties) GetOpacity() (kind CssKind, out Float) {
	inter := s["opacity"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Float)
}
func (s Properties) SetOpacity(v Float) {
	s["opacity"] = v
}

func (s Properties) GetColumnWidth() (kind CssKind, out Value) {
	inter := s["column_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetColumnWidth(v Value) {
	s["column_width"] = v
}

func (s Properties) GetColumnCount() (kind CssKind, out Value) {
	inter := s["column_count"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetColumnCount(v Value) {
	s["column_count"] = v
}

func (s Properties) GetColumnGap() (kind CssKind, out Value) {
	inter := s["column_gap"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetColumnGap(v Value) {
	s["column_gap"] = v
}

func (s Properties) GetColumnRuleColor() (kind CssKind, out Color) {
	inter := s["column_rule_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetColumnRuleColor(v Color) {
	s["column_rule_color"] = v
}

func (s Properties) GetColumnRuleStyle() (kind CssKind, out String) {
	inter := s["column_rule_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetColumnRuleStyle(v String) {
	s["column_rule_style"] = v
}

func (s Properties) GetColumnRuleWidth() (kind CssKind, out Value) {
	inter := s["column_rule_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetColumnRuleWidth(v Value) {
	s["column_rule_width"] = v
}

func (s Properties) GetColumnFill() (kind CssKind, out String) {
	inter := s["column_fill"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetColumnFill(v String) {
	s["column_fill"] = v
}

func (s Properties) GetColumnSpan() (kind CssKind, out String) {
	inter := s["column_span"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetColumnSpan(v String) {
	s["column_span"] = v
}

func (s Properties) GetFontFamily() (kind CssKind, out Strings) {
	inter := s["font_family"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Strings)
}
func (s Properties) SetFontFamily(v Strings) {
	s["font_family"] = v
}

func (s Properties) GetFontFeatureSettings() (kind CssKind, out SIntStrings) {
	inter := s["font_feature_settings"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SIntStrings)
}
func (s Properties) SetFontFeatureSettings(v SIntStrings) {
	s["font_feature_settings"] = v
}

func (s Properties) GetFontKerning() (kind CssKind, out String) {
	inter := s["font_kerning"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontKerning(v String) {
	s["font_kerning"] = v
}

func (s Properties) GetFontLanguageOverride() (kind CssKind, out String) {
	inter := s["font_language_override"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontLanguageOverride(v String) {
	s["font_language_override"] = v
}

func (s Properties) GetFontSize() (kind CssKind, out Value) {
	inter := s["font_size"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetFontSize(v Value) {
	s["font_size"] = v
}

func (s Properties) GetFontStretch() (kind CssKind, out String) {
	inter := s["font_stretch"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontStretch(v String) {
	s["font_stretch"] = v
}

func (s Properties) GetFontStyle() (kind CssKind, out String) {
	inter := s["font_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontStyle(v String) {
	s["font_style"] = v
}

func (s Properties) GetFontVariant() (kind CssKind, out String) {
	inter := s["font_variant"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontVariant(v String) {
	s["font_variant"] = v
}

func (s Properties) GetFontVariantAlternates() (kind CssKind, out String) {
	inter := s["font_variant_alternates"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontVariantAlternates(v String) {
	s["font_variant_alternates"] = v
}

func (s Properties) GetFontVariantCaps() (kind CssKind, out String) {
	inter := s["font_variant_caps"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontVariantCaps(v String) {
	s["font_variant_caps"] = v
}

func (s Properties) GetFontVariantEastAsian() (kind CssKind, out SStrings) {
	inter := s["font_variant_east_asian"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SStrings)
}
func (s Properties) SetFontVariantEastAsian(v SStrings) {
	s["font_variant_east_asian"] = v
}

func (s Properties) GetFontVariantLigatures() (kind CssKind, out SStrings) {
	inter := s["font_variant_ligatures"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SStrings)
}
func (s Properties) SetFontVariantLigatures(v SStrings) {
	s["font_variant_ligatures"] = v
}

func (s Properties) GetFontVariantNumeric() (kind CssKind, out SStrings) {
	inter := s["font_variant_numeric"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SStrings)
}
func (s Properties) SetFontVariantNumeric(v SStrings) {
	s["font_variant_numeric"] = v
}

func (s Properties) GetFontVariantPosition() (kind CssKind, out String) {
	inter := s["font_variant_position"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFontVariantPosition(v String) {
	s["font_variant_position"] = v
}

func (s Properties) GetFontWeight() (kind CssKind, out IntString) {
	inter := s["font_weight"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(IntString)
}
func (s Properties) SetFontWeight(v IntString) {
	s["font_weight"] = v
}

func (s Properties) GetBoxDecorationBreak() (kind CssKind, out String) {
	inter := s["box_decoration_break"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBoxDecorationBreak(v String) {
	s["box_decoration_break"] = v
}

func (s Properties) GetBreakAfter() (kind CssKind, out String) {
	inter := s["break_after"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBreakAfter(v String) {
	s["break_after"] = v
}

func (s Properties) GetBreakBefore() (kind CssKind, out String) {
	inter := s["break_before"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBreakBefore(v String) {
	s["break_before"] = v
}

func (s Properties) GetBreakInside() (kind CssKind, out String) {
	inter := s["break_inside"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBreakInside(v String) {
	s["break_inside"] = v
}

func (s Properties) GetMarginBreak() (kind CssKind, out String) {
	inter := s["margin_break"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetMarginBreak(v String) {
	s["margin_break"] = v
}

func (s Properties) GetOrphans() (kind CssKind, out Int) {
	inter := s["orphans"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Int)
}
func (s Properties) SetOrphans(v Int) {
	s["orphans"] = v
}

func (s Properties) GetWidows() (kind CssKind, out Int) {
	inter := s["widows"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Int)
}
func (s Properties) SetWidows(v Int) {
	s["widows"] = v
}

func (s Properties) GetBookmarkLabel() (kind CssKind, out BookmarkLabel) {
	inter := s["bookmark_label"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(BookmarkLabel)
}
func (s Properties) SetBookmarkLabel(v BookmarkLabel) {
	s["bookmark_label"] = v
}

func (s Properties) GetBookmarkLevel() (kind CssKind, out IntString) {
	inter := s["bookmark_level"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(IntString)
}
func (s Properties) SetBookmarkLevel(v IntString) {
	s["bookmark_level"] = v
}

func (s Properties) GetBookmarkState() (kind CssKind, out String) {
	inter := s["bookmark_state"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBookmarkState(v String) {
	s["bookmark_state"] = v
}

func (s Properties) GetContent() (kind CssKind, out SContent) {
	inter := s["content"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(SContent)
}
func (s Properties) SetContent(v SContent) {
	s["content"] = v
}

func (s Properties) GetQuotes() (kind CssKind, out Quotes) {
	inter := s["quotes"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Quotes)
}
func (s Properties) SetQuotes(v Quotes) {
	s["quotes"] = v
}

func (s Properties) GetStringSet() (kind CssKind, out StringSet) {
	inter := s["string_set"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(StringSet)
}
func (s Properties) SetStringSet(v StringSet) {
	s["string_set"] = v
}

func (s Properties) GetImageResolution() (kind CssKind, out Value) {
	inter := s["image_resolution"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetImageResolution(v Value) {
	s["image_resolution"] = v
}

func (s Properties) GetImageRendering() (kind CssKind, out String) {
	inter := s["image_rendering"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetImageRendering(v String) {
	s["image_rendering"] = v
}

func (s Properties) GetObjectFit() (kind CssKind, out String) {
	inter := s["object_fit"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetObjectFit(v String) {
	s["object_fit"] = v
}

func (s Properties) GetObjectPosition() (kind CssKind, out Center) {
	inter := s["object_position"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Center)
}
func (s Properties) SetObjectPosition(v Center) {
	s["object_position"] = v
}

func (s Properties) GetSize() (kind CssKind, out Values) {
	inter := s["size"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Values)
}
func (s Properties) SetSize(v Values) {
	s["size"] = v
}

func (s Properties) GetPage() (kind CssKind, out Page) {
	inter := s["page"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Page)
}
func (s Properties) SetPage(v Page) {
	s["page"] = v
}

func (s Properties) GetBleedLeft() (kind CssKind, out Value) {
	inter := s["bleed_left"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBleedLeft(v Value) {
	s["bleed_left"] = v
}

func (s Properties) GetBleedRight() (kind CssKind, out Value) {
	inter := s["bleed_right"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBleedRight(v Value) {
	s["bleed_right"] = v
}

func (s Properties) GetBleedTop() (kind CssKind, out Value) {
	inter := s["bleed_top"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBleedTop(v Value) {
	s["bleed_top"] = v
}

func (s Properties) GetBleedBottom() (kind CssKind, out Value) {
	inter := s["bleed_bottom"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetBleedBottom(v Value) {
	s["bleed_bottom"] = v
}

func (s Properties) GetMarks() (kind CssKind, out Marks) {
	inter := s["marks"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Marks)
}
func (s Properties) SetMarks(v Marks) {
	s["marks"] = v
}

func (s Properties) GetHyphenateCharacter() (kind CssKind, out String) {
	inter := s["hyphenate_character"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetHyphenateCharacter(v String) {
	s["hyphenate_character"] = v
}

func (s Properties) GetHyphenateLimitChars() (kind CssKind, out Ints3) {
	inter := s["hyphenate_limit_chars"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Ints3)
}
func (s Properties) SetHyphenateLimitChars(v Ints3) {
	s["hyphenate_limit_chars"] = v
}

func (s Properties) GetHyphenateLimitZone() (kind CssKind, out Value) {
	inter := s["hyphenate_limit_zone"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetHyphenateLimitZone(v Value) {
	s["hyphenate_limit_zone"] = v
}

func (s Properties) GetHyphens() (kind CssKind, out String) {
	inter := s["hyphens"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetHyphens(v String) {
	s["hyphens"] = v
}

func (s Properties) GetLetterSpacing() (kind CssKind, out Value) {
	inter := s["letter_spacing"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetLetterSpacing(v Value) {
	s["letter_spacing"] = v
}

func (s Properties) GetTabSize() (kind CssKind, out Value) {
	inter := s["tab_size"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetTabSize(v Value) {
	s["tab_size"] = v
}

func (s Properties) GetTextAlign() (kind CssKind, out String) {
	inter := s["text_align"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetTextAlign(v String) {
	s["text_align"] = v
}

func (s Properties) GetTextIndent() (kind CssKind, out Value) {
	inter := s["text_indent"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetTextIndent(v Value) {
	s["text_indent"] = v
}

func (s Properties) GetTextTransform() (kind CssKind, out String) {
	inter := s["text_transform"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetTextTransform(v String) {
	s["text_transform"] = v
}

func (s Properties) GetWhiteSpace() (kind CssKind, out String) {
	inter := s["white_space"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetWhiteSpace(v String) {
	s["white_space"] = v
}

func (s Properties) GetWordSpacing() (kind CssKind, out Value) {
	inter := s["word_spacing"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetWordSpacing(v Value) {
	s["word_spacing"] = v
}

func (s Properties) GetTransformOrigin() (kind CssKind, out Point) {
	inter := s["transform_origin"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Point)
}
func (s Properties) SetTransformOrigin(v Point) {
	s["transform_origin"] = v
}

func (s Properties) GetTransform() (kind CssKind, out Transforms) {
	inter := s["transform"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Transforms)
}
func (s Properties) SetTransform(v Transforms) {
	s["transform"] = v
}

func (s Properties) GetBoxSizing() (kind CssKind, out String) {
	inter := s["box_sizing"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetBoxSizing(v String) {
	s["box_sizing"] = v
}

func (s Properties) GetOutlineColor() (kind CssKind, out Color) {
	inter := s["outline_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetOutlineColor(v Color) {
	s["outline_color"] = v
}

func (s Properties) GetOutlineStyle() (kind CssKind, out String) {
	inter := s["outline_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetOutlineStyle(v String) {
	s["outline_style"] = v
}

func (s Properties) GetOutlineWidth() (kind CssKind, out Value) {
	inter := s["outline_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetOutlineWidth(v Value) {
	s["outline_width"] = v
}

func (s Properties) GetOverflowWrap() (kind CssKind, out String) {
	inter := s["overflow_wrap"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetOverflowWrap(v String) {
	s["overflow_wrap"] = v
}

func (s Properties) GetAlignContent() (kind CssKind, out String) {
	inter := s["align_content"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetAlignContent(v String) {
	s["align_content"] = v
}

func (s Properties) GetAlignItems() (kind CssKind, out String) {
	inter := s["align_items"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetAlignItems(v String) {
	s["align_items"] = v
}

func (s Properties) GetAlignSelf() (kind CssKind, out String) {
	inter := s["align_self"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetAlignSelf(v String) {
	s["align_self"] = v
}

func (s Properties) GetFlexBasis() (kind CssKind, out Value) {
	inter := s["flex_basis"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetFlexBasis(v Value) {
	s["flex_basis"] = v
}

func (s Properties) GetFlexDirection() (kind CssKind, out String) {
	inter := s["flex_direction"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFlexDirection(v String) {
	s["flex_direction"] = v
}

func (s Properties) GetFlexGrow() (kind CssKind, out Float) {
	inter := s["flex_grow"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Float)
}
func (s Properties) SetFlexGrow(v Float) {
	s["flex_grow"] = v
}

func (s Properties) GetFlexShrink() (kind CssKind, out Float) {
	inter := s["flex_shrink"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Float)
}
func (s Properties) SetFlexShrink(v Float) {
	s["flex_shrink"] = v
}

func (s Properties) GetFlexWrap() (kind CssKind, out String) {
	inter := s["flex_wrap"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetFlexWrap(v String) {
	s["flex_wrap"] = v
}

func (s Properties) GetJustifyContent() (kind CssKind, out String) {
	inter := s["justify_content"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetJustifyContent(v String) {
	s["justify_content"] = v
}

func (s Properties) GetMinHeight() (kind CssKind, out Value) {
	inter := s["min_height"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMinHeight(v Value) {
	s["min_height"] = v
}

func (s Properties) GetMinWidth() (kind CssKind, out Value) {
	inter := s["min_width"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Value)
}
func (s Properties) SetMinWidth(v Value) {
	s["min_width"] = v
}

func (s Properties) GetOrder() (kind CssKind, out Int) {
	inter := s["order"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Int)
}
func (s Properties) SetOrder(v Int) {
	s["order"] = v
}

func (s Properties) GetTextDecorationLine() (kind CssKind, out NDecorations) {
	inter := s["text_decoration_line"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(NDecorations)
}
func (s Properties) SetTextDecorationLine(v NDecorations) {
	s["text_decoration_line"] = v
}

func (s Properties) GetTextDecorationColor() (kind CssKind, out Color) {
	inter := s["text_decoration_color"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(Color)
}
func (s Properties) SetTextDecorationColor(v Color) {
	s["text_decoration_color"] = v
}

func (s Properties) GetTextDecorationStyle() (kind CssKind, out String) {
	inter := s["text_decoration_style"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetTextDecorationStyle(v String) {
	s["text_decoration_style"] = v
}

func (s Properties) GetOverflow() (kind CssKind, out String) {
	inter := s["overflow"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetOverflow(v String) {
	s["overflow"] = v
}

func (s Properties) GetTextOverflow() (kind CssKind, out String) {
	inter := s["text_overflow"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetTextOverflow(v String) {
	s["text_overflow"] = v
}

func (s Properties) GetAnchor() (kind CssKind, out NamedString) {
	inter := s["anchor"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(NamedString)
}
func (s Properties) SetAnchor(v NamedString) {
	s["anchor"] = v
}

func (s Properties) GetLink() (kind CssKind, out NamedString) {
	inter := s["link"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(NamedString)
}
func (s Properties) SetLink(v NamedString) {
	s["link"] = v
}

func (s Properties) GetLang() (kind CssKind, out NamedString) {
	inter := s["lang"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(NamedString)
}
func (s Properties) SetLang(v NamedString) {
	s["lang"] = v
}

func (s Properties) GetWeasySpecifiedDisplay() (kind CssKind, out String) {
	inter := s["_weasy_specified_display"]
	if inter == nil {
		return None, out
	}
	if kind, ok := inter.(CssKind); ok {
		return kind, out
	}
	return Normal, inter.(String)
}
func (s Properties) SetWeasySpecifiedDisplay(v String) {
	s["_weasy_specified_display"] = v
}
