func getFontFeatures(
        fontKerning="normal", fontVariantLigatures="normal",
        fontVariantPosition="normal", fontVariantCaps="normal",
        fontVariantNumeric="normal", fontVariantAlternates="normal",
        fontVariantEastAsian="normal", fontFeatureSettings="normal") {
    """Get the font features from the different properties := range style.

    See https://www.w3.org/TR/css-fonts-3/#feature-precedence

        }
    """
    features = {}
    ligatureKeys = {
        "common-ligatures": ["liga", "clig"],
        "historical-ligatures": ["hlig"],
        "discretionary-ligatures": ["dlig"],
        "contextual": ["calt"]}
    capsKeys = {
        "small-caps": ["smcp"],
        "all-small-caps": ["c2sc", "smcp"],
        "petite-caps": ["pcap"],
        "all-petite-caps": ["c2pc", "pcap"],
        "unicase": ["unic"],
        "titling-caps": ["titl"]}
    numericKeys = {
        "lining-nums": "lnum",
        "oldstyle-nums": "onum",
        "proportional-nums": "pnum",
        "tabular-nums": "tnum",
        "diagonal-fractions": "frac",
        "stacked-fractions": "afrc",
        "ordinal": "ordn",
        "slashed-zero": "zero"}
    eastAsianKeys = {
        "jis78": "jp78",
        "jis83": "jp83",
        "jis90": "jp90",
        "jis04": "jp04",
        "simplified": "smpl",
        "traditional": "trad",
        "full-width": "fwid",
        "proportional-width": "pwid",
        "ruby": "ruby"}

    // Step 1: getting the default, we rely on Pango for this
    // Step 2: @font-face font-variant, done := range fonts.addFontFace
    // Step 3: @font-face font-feature-settings, done := range fonts.addFontFace

    // Step 4: font-variant && OpenType features

    if fontKerning != "auto" {
        features["kern"] = int(fontKerning == "normal")
    }

    if fontVariantLigatures == "none" {
        for keys := range ligatureKeys.values() {
            for key := range keys {
                features[key] = 0
            }
        }
    } else if fontVariantLigatures != "normal" {
        for ligatureType := range fontVariantLigatures {
            value = 1
            if ligatureType.startswith("no-") {
                value = 0
                ligatureType = ligatureType[3:]
            } for key := range ligatureKeys[ligatureType] {
                features[key] = value
            }
        }
    }

    if fontVariantPosition == "sub" {
        // TODO: the specification asks for additional checks
        // https://www.w3.org/TR/css-fonts-3/#font-variant-position-prop
        features["subs"] = 1
    } else if fontVariantPosition == "super" {
        features["sups"] = 1
    }

    if fontVariantCaps != "normal" {
        // TODO: the specification asks for additional checks
        // https://www.w3.org/TR/css-fonts-3/#font-variant-caps-prop
        for key := range capsKeys[fontVariantCaps] {
            features[key] = 1
        }
    }

    if fontVariantNumeric != "normal" {
        for key := range fontVariantNumeric {
            features[numericKeys[key]] = 1
        }
    }

    if fontVariantAlternates != "normal" {
        // TODO: support other values
        // See https://www.w3.org/TR/css-fonts-3/#font-variant-caps-prop
        if fontVariantAlternates == "historical-forms" {
            features["hist"] = 1
        }
    }

    if fontVariantEastAsian != "normal" {
        for key := range fontVariantEastAsian {
            features[eastAsianKeys[key]] = 1
        }
    }

    // Step 5: incompatible non-OpenType features, already handled by Pango

    // Step 6: font-feature-settings

    if fontFeatureSettings != "normal" {
        features.update(dict(fontFeatureSettings))
    }

    return features