package structure

import pr "github.com/benoitkugler/go-weasyprint/style/properties"

// autogenerated from source_box.py

type InstanceBox interface {
	isBox()
}
type InstanceParentBox interface {
	isParentBox()
	isBox()
}

//
func (b *ParentBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

//
func (b *ParentBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

//
func (b *ParentBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

// is_start=True is_end=True
func (b *ParentBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

//
func (b *ParentBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

//
func (b *ParentBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

//
func (b *ParentBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

//
func (b *ParentBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type InstanceBlockLevelBox interface {
	isBlockLevelBox()
	isBox()
}
type InstanceBlockContainerBox interface {
	isBlockContainerBox()
	isBox()
	isParentBox()
}
type InstanceBlockBox interface {
	isBlockBox()
	isBox()
	isBlockLevelBox()
	isBlockContainerBox()
	isParentBox()
}
type InstanceLineBox interface {
	isLineBox()
	isBox()
	isParentBox()
}
type InstanceInlineLevelBox interface {
	isInlineLevelBox()
	isBox()
}

//
func (b *InlineLevelBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

type InstanceInlineBox interface {
	isInlineBox()
	isInlineLevelBox()
	isBox()
	isParentBox()
}
type InstanceTextBox interface {
	isTextBox()
	isInlineLevelBox()
	isBox()
}
type InstanceAtomicInlineLevelBox interface {
	isAtomicInlineLevelBox()
	isInlineLevelBox()
	isBox()
}
type InstanceInlineBlockBox interface {
	isInlineBlockBox()
	isInlineLevelBox()
	isBox()
	isAtomicInlineLevelBox()
	isBlockContainerBox()
	isParentBox()
}
type InstanceReplacedBox interface {
	isReplacedBox()
	isBox()
}
type InstanceBlockReplacedBox interface {
	isBlockReplacedBox()
	isBlockLevelBox()
	isBox()
	isReplacedBox()
}
type InstanceInlineReplacedBox interface {
	isInlineReplacedBox()
	isInlineLevelBox()
	isBox()
	isAtomicInlineLevelBox()
	isReplacedBox()
}
type InstanceTableBox interface {
	isTableBox()
	isBlockLevelBox()
	isBox()
	isParentBox()
}

//
func (b *TableBox) allChildren() []Box {
	return TableBoxAllChildren(b)
}

// dx=0 dy=0 ignore_floats=False
func (b *TableBox) translate(dx float32, dy float32, ignoreFloats bool) {
	TableBoxTranslate(b, dx, dy, ignoreFloats)
}

//
func (b *TableBox) pageValues() (pr.Page, pr.Page) {
	return TableBoxPageValues(b)
}

type InstanceInlineTableBox interface {
	isInlineTableBox()
	isBlockLevelBox()
	isBox()
	isTableBox()
	isParentBox()
}
type InstanceTableRowGroupBox interface {
	isTableRowGroupBox()
	isBox()
	isParentBox()
}
type InstanceTableRowBox interface {
	isTableRowBox()
	isBox()
	isParentBox()
}
type InstanceTableColumnGroupBox interface {
	isTableColumnGroupBox()
	isBox()
	isParentBox()
}
type InstanceTableColumnBox interface {
	isTableColumnBox()
	isBox()
	isParentBox()
}
type InstanceTableCellBox interface {
	isTableCellBox()
	isBlockContainerBox()
	isBox()
	isParentBox()
}
type InstanceTableCaptionBox interface {
	isTableCaptionBox()
	isBlockBox()
	isBox()
	isBlockLevelBox()
	isBlockContainerBox()
	isParentBox()
}
type InstancePageBox interface {
	isPageBox()
	isBox()
	isParentBox()
}
type InstanceMarginBox interface {
	isMarginBox()
	isBlockContainerBox()
	isBox()
	isParentBox()
}
type InstanceFlexContainerBox interface {
	isFlexContainerBox()
	isBox()
	isParentBox()
}
type InstanceFlexBox interface {
	isFlexBox()
	isFlexContainerBox()
	isBox()
	isBlockLevelBox()
	isParentBox()
}
type InstanceInlineFlexBox interface {
	isInlineFlexBox()
	isFlexContainerBox()
	isInlineLevelBox()
	isBox()
	isParentBox()
}
type Box struct {
	BoxFields
	InstanceBox
}

type ParentBox struct {
	BoxFields
	InstanceParentBox
}

type BlockLevelBox struct {
	BoxFields
	InstanceBlockLevelBox

	clearance interface{} // None
}

type BlockContainerBox struct {
	BoxFields
	InstanceBlockContainerBox
}

func NewBlockContainerBox(elementTag string, style pr.Properties, children []Box) BlockContainerBox {
	fields := newBoxFields(elementTag, style, children)
	out := BlockContainerBox{BoxFields: fields}

	return out
}

func (b BlockContainerBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b BlockContainerBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b BlockContainerBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b BlockContainerBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b BlockContainerBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b BlockContainerBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b BlockContainerBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b BlockContainerBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type BlockBox struct {
	BoxFields
	InstanceBlockBox
}

func NewBlockBox(elementTag string, style pr.Properties, children []Box) BlockBox {
	fields := newBoxFields(elementTag, style, children)
	out := BlockBox{BoxFields: fields}

	return out
}

func (b BlockBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b BlockBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b BlockBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b BlockBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b BlockBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b BlockBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b BlockBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b BlockBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type LineBox struct {
	BoxFields
	InstanceLineBox

	textOverflow string // "clip"
}

func NewLineBox(elementTag string, style pr.Properties, children []Box) LineBox {
	fields := newBoxFields(elementTag, style, children)
	out := LineBox{BoxFields: fields}
	out.text_overflow = "clip"
	return out
}

func (b LineBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b LineBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b LineBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b LineBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b LineBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b LineBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b LineBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b LineBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type InlineLevelBox struct {
	BoxFields
	InstanceInlineLevelBox
}

type InlineBox struct {
	BoxFields
	InstanceInlineBox
}

func NewInlineBox(elementTag string, style pr.Properties, children []Box) InlineBox {
	fields := newBoxFields(elementTag, style, children)
	out := InlineBox{BoxFields: fields}

	return out
}

func (b InlineBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

func (b InlineBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b InlineBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b InlineBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b InlineBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b InlineBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b InlineBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b InlineBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TextBox struct {
	BoxFields
	InstanceTextBox

	justificationSpacing int // 0
}

func (b TextBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

type AtomicInlineLevelBox struct {
	BoxFields
	InstanceAtomicInlineLevelBox
}

func (b AtomicInlineLevelBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

type InlineBlockBox struct {
	BoxFields
	InstanceInlineBlockBox
}

func NewInlineBlockBox(elementTag string, style pr.Properties, children []Box) InlineBlockBox {
	fields := newBoxFields(elementTag, style, children)
	out := InlineBlockBox{BoxFields: fields}

	return out
}

func (b InlineBlockBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

func (b InlineBlockBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b InlineBlockBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b InlineBlockBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b InlineBlockBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b InlineBlockBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b InlineBlockBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b InlineBlockBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type ReplacedBox struct {
	BoxFields
	InstanceReplacedBox
}

type BlockReplacedBox struct {
	BoxFields
	InstanceBlockReplacedBox
}

func NewBlockReplacedBox(elementTag string, style pr.Properties, children []Box) BlockReplacedBox {
	fields := newBoxFields(elementTag, style, children)
	out := BlockReplacedBox{BoxFields: fields}

	return out
}

type InlineReplacedBox struct {
	BoxFields
	InstanceInlineReplacedBox
}

func NewInlineReplacedBox(elementTag string, style pr.Properties, children []Box) InlineReplacedBox {
	fields := newBoxFields(elementTag, style, children)
	out := InlineReplacedBox{BoxFields: fields}

	return out
}

func (b InlineReplacedBox) removeDecoration(start bool, end bool) {
	InlineLevelBoxRemoveDecoration(b, start, end)
}

type TableBox struct {
	BoxFields
	InstanceTableBox

	TableFields
}

func NewTableBox(elementTag string, style pr.Properties, children []Box) TableBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableBox{BoxFields: fields}

	return out
}

func (b TableBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

type InlineTableBox struct {
	BoxFields
	InstanceInlineTableBox

	TableFields
}

func NewInlineTableBox(elementTag string, style pr.Properties, children []Box) InlineTableBox {
	fields := newBoxFields(elementTag, style, children)
	out := InlineTableBox{BoxFields: fields}

	return out
}

func (b InlineTableBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b InlineTableBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b InlineTableBox) allChildren() []Box {
	return TableBoxAllChildren(b)
}

func (b InlineTableBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b InlineTableBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b InlineTableBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b InlineTableBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b InlineTableBox) pageValues() (pr.Page, pr.Page) {
	return TableBoxPageValues(b)
}

func (b InlineTableBox) translate(dx float32, dy float32, ignoreFloats bool) {
	TableBoxTranslate(b, dx, dy, ignoreFloats)
}

type TableRowGroupBox struct {
	BoxFields
	InstanceTableRowGroupBox
}

func NewTableRowGroupBox(elementTag string, style pr.Properties, children []Box) TableRowGroupBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableRowGroupBox{BoxFields: fields}

	return out
}

func (b TableRowGroupBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableRowGroupBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableRowGroupBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableRowGroupBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableRowGroupBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableRowGroupBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableRowGroupBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableRowGroupBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TableRowBox struct {
	BoxFields
	InstanceTableRowBox
}

func NewTableRowBox(elementTag string, style pr.Properties, children []Box) TableRowBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableRowBox{BoxFields: fields}

	return out
}

func (b TableRowBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableRowBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableRowBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableRowBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableRowBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableRowBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableRowBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableRowBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TableColumnGroupBox struct {
	BoxFields
	InstanceTableColumnGroupBox

	span int // 1
}

func NewTableColumnGroupBox(elementTag string, style pr.Properties, children []Box) TableColumnGroupBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableColumnGroupBox{BoxFields: fields}
	out.span = 1
	return out
}

func (b TableColumnGroupBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableColumnGroupBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableColumnGroupBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableColumnGroupBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableColumnGroupBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableColumnGroupBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableColumnGroupBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableColumnGroupBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TableColumnBox struct {
	BoxFields
	InstanceTableColumnBox

	span int // 1
}

func NewTableColumnBox(elementTag string, style pr.Properties, children []Box) TableColumnBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableColumnBox{BoxFields: fields}
	out.span = 1
	return out
}

func (b TableColumnBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableColumnBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableColumnBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableColumnBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableColumnBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableColumnBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableColumnBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableColumnBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TableCellBox struct {
	BoxFields
	InstanceTableCellBox
}

func NewTableCellBox(elementTag string, style pr.Properties, children []Box) TableCellBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableCellBox{BoxFields: fields}

	return out
}

func (b TableCellBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableCellBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableCellBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableCellBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableCellBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableCellBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableCellBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableCellBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type TableCaptionBox struct {
	BoxFields
	InstanceTableCaptionBox
}

func NewTableCaptionBox(elementTag string, style pr.Properties, children []Box) TableCaptionBox {
	fields := newBoxFields(elementTag, style, children)
	out := TableCaptionBox{BoxFields: fields}

	return out
}

func (b TableCaptionBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b TableCaptionBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b TableCaptionBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b TableCaptionBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b TableCaptionBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b TableCaptionBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b TableCaptionBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b TableCaptionBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type PageBox struct {
	BoxFields
	InstancePageBox
}

func (b PageBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b PageBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b PageBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b PageBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b PageBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b PageBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b PageBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b PageBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type MarginBox struct {
	BoxFields
	InstanceMarginBox
}

func (b MarginBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b MarginBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b MarginBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b MarginBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b MarginBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b MarginBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b MarginBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b MarginBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type FlexContainerBox struct {
	BoxFields
	InstanceFlexContainerBox
}

func NewFlexContainerBox(elementTag string, style pr.Properties, children []Box) FlexContainerBox {
	fields := newBoxFields(elementTag, style, children)
	out := FlexContainerBox{BoxFields: fields}

	return out
}

func (b FlexContainerBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b FlexContainerBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b FlexContainerBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b FlexContainerBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b FlexContainerBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b FlexContainerBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b FlexContainerBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b FlexContainerBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type FlexBox struct {
	BoxFields
	InstanceFlexBox
}

func NewFlexBox(elementTag string, style pr.Properties, children []Box) FlexBox {
	fields := newBoxFields(elementTag, style, children)
	out := FlexBox{BoxFields: fields}

	return out
}

func (b FlexBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b FlexBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b FlexBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b FlexBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b FlexBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b FlexBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b FlexBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b FlexBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}

type InlineFlexBox struct {
	BoxFields
	InstanceInlineFlexBox
}

func NewInlineFlexBox(elementTag string, style pr.Properties, children []Box) InlineFlexBox {
	fields := newBoxFields(elementTag, style, children)
	out := InlineFlexBox{BoxFields: fields}

	return out
}

func (b InlineFlexBox) removeDecoration(start bool, end bool) {
	ParentBoxRemoveDecoration(b, start, end)
}

func (b InlineFlexBox) resetSpacing(side string) {
	ParentBoxResetSpacing(b, side)
}

func (b InlineFlexBox) allChildren() []Box {
	return ParentBoxAllChildren(b)
}

func (b InlineFlexBox) copyWithChildren(newChildren []Box, isStart bool, isEnd bool) Box {
	return ParentBoxCopyWithChildren(b, newChildren, isStart, isEnd)
}

func (b InlineFlexBox) deepcopy() Box {
	return ParentBoxDeepcopy(b)
}

func (b InlineFlexBox) descendants() []Box {
	return ParentBoxDescendants(b)
}

func (b InlineFlexBox) getWrappedTable() (Box, error) {
	return ParentBoxGetWrappedTable(b)
}

func (b InlineFlexBox) pageValues() (pr.Page, pr.Page) {
	return ParentBoxPageValues(b)
}
