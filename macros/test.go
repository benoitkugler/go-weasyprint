package boxes

// Code generated by macros/boxes.py DO NOT EDIT

// An atomic box in an inline formatting context.
// This inline-level box cannot be split for line breaks.
type AtomicInlineLevelBoxITF interface {
	InlineLevelBoxITF
	isAtomicInlineLevelBox()
}

func (AtomicInlineLevelBox) Type() BoxType { return AtomicInlineLevelBoxT }

// A block-level box that is also a block container.
// A non-replaced element with a ``display`` value of ``block``, ``list-item``
// generates a block box.
type BlockBoxITF interface {
	BlockLevelBoxITF
	BlockContainerBoxITF
	isBlockBox()
}

func (BlockBox) Type() BoxType { return BlockBoxT }

// A box that contains only block-level boxes or only line boxes.
// A box that either contains only block-level boxes or establishes an inline
// formatting context and thus contains only line boxes.
// A non-replaced element with a ``display`` value of ``block``,
// ``list-item``, ``inline-block`` or 'table-cell' generates a block container
// box.
type BlockContainerBoxITF interface {
	ParentBoxITF
	isBlockContainerBox()
}

func (BlockContainerBox) Type() BoxType { return BlockContainerBoxT }

// A box that participates in an block formatting context.
// An element with a ``display`` value of ``block``, ``list-item`` or
// ``table`` generates a block-level box.
type BlockLevelBoxITF interface {
	BoxITF
	isBlockLevelBox()
	methodsBlockLevelBox
}

func (BlockLevelBox) Type() BoxType { return BlockLevelBoxT }

// A box that is both replaced and block-level.
// A replaced element with a ``display`` value of ``block``, ``liste-item`` or
// ``table`` generates a block-level replaced box.
type BlockReplacedBoxITF interface {
	BlockLevelBoxITF
	ReplacedBoxITF
	isBlockReplacedBox()
}

func (BlockReplacedBox) Type() BoxType { return BlockReplacedBoxT }

// Abstract base class for all boxes.
type BoxITF interface {
	isBox()
	methodsBox
}

func (Box) Type() BoxType { return BoxT }

// A box that is both block-level and a flex container.
// It behaves as block on the outside and as a flex container on the inside.
type FlexBoxITF interface {
	BlockLevelBoxITF
	FlexContainerBoxITF
	isFlexBox()
}

func (FlexBox) Type() BoxType { return FlexBoxT }

// A box that contains only flex-items.
type FlexContainerBoxITF interface {
	ParentBoxITF
	isFlexContainerBox()
}

func (FlexContainerBox) Type() BoxType { return FlexContainerBoxT }

// A box that is both inline-level and a block container.
// It behaves as inline on the outside and as a block on the inside.
// A non-replaced element with a 'display' value of 'inline-block' generates
// an inline-block box.
type InlineBlockBoxITF interface {
	AtomicInlineLevelBoxITF
	BlockContainerBoxITF
	isInlineBlockBox()
}

func (InlineBlockBox) Type() BoxType { return InlineBlockBoxT }

// An inline box with inline children.
// A box that participates in an inline formatting context and whose content
// also participates in that inline formatting context.
// A non-replaced element with a ``display`` value of ``inline`` generates an
// inline box.
type InlineBoxITF interface {
	InlineLevelBoxITF
	ParentBoxITF
	isInlineBox()
}

func (InlineBox) Type() BoxType { return InlineBoxT }

// A box that is both inline-level and a flex container.
// It behaves as inline on the outside and as a flex container on the inside.
type InlineFlexBoxITF interface {
	InlineLevelBoxITF
	FlexContainerBoxITF
	isInlineFlexBox()
}

func (InlineFlexBox) Type() BoxType { return InlineFlexBoxT }

// A box that participates in an inline formatting context.
// An inline-level box that is not an inline box is said to be "atomic". Such
// boxes are inline blocks, replaced elements and inline tables.
// An element with a ``display`` value of ``inline``, ``inline-table``, or
// ``inline-block`` generates an inline-level box.
type InlineLevelBoxITF interface {
	BoxITF
	isInlineLevelBox()
}

func (InlineLevelBox) Type() BoxType { return InlineLevelBoxT }

// A box that is both replaced and inline-level.
// A replaced element with a ``display`` value of ``inline``,
// ``inline-table``, or ``inline-block`` generates an inline-level replaced
// box.
type InlineReplacedBoxITF interface {
	AtomicInlineLevelBoxITF
	ReplacedBoxITF
	isInlineReplacedBox()
}

func (InlineReplacedBox) Type() BoxType { return InlineReplacedBoxT }

// Box for elements with ``display: inline-table``
type InlineTableBoxITF interface {
	TableBoxITF
	isInlineTableBox()
}

func (InlineTableBox) Type() BoxType { return InlineTableBoxT }

// A box that represents a line in an inline formatting context.
// Can only contain inline-level boxes.
// In early stages of building the box tree a single line box contains many
// consecutive inline boxes. Later, during layout phase, each line boxes will
// be split into multiple line boxes, one for each actual line.
type LineBoxITF interface {
	ParentBoxITF
	isLineBox()
}

func (LineBox) Type() BoxType { return LineBoxT }

// Box in page margins, as defined in CSS3 Paged Media
type MarginBoxITF interface {
	BlockContainerBoxITF
	isMarginBox()
}

func (MarginBox) Type() BoxType { return MarginBoxT }

// Box for a page.
// Initially the whole document will be in the box for the root element.
// During layout a new page box is created after every page break.
type PageBoxITF interface {
	ParentBoxITF
	isPageBox()
}

func (PageBox) Type() BoxType { return PageBoxT }

// A box that has children.
type ParentBoxITF interface {
	BoxITF
	isParentBox()
}

func (ParentBox) Type() BoxType { return ParentBoxT }

// A box whose content is replaced.
// For example, ``<img>`` are replaced: their content is rendered externally
// and is opaque from CSSâ€™s point of view.
type ReplacedBoxITF interface {
	BoxITF
	isReplacedBox()
	methodsReplacedBox
}

func (ReplacedBox) Type() BoxType { return ReplacedBoxT }

// Box for elements with ``display: table``
type TableBoxITF interface {
	BlockLevelBoxITF
	ParentBoxITF
	isTableBox()
	methodsTableBox
}

func (TableBox) Type() BoxType { return TableBoxT }

// Box for elements with ``display: table-caption``
type TableCaptionBoxITF interface {
	BlockBoxITF
	isTableCaptionBox()
}

func (TableCaptionBox) Type() BoxType { return TableCaptionBoxT }

// Box for elements with ``display: table-cell``
type TableCellBoxITF interface {
	BlockContainerBoxITF
	isTableCellBox()
}

func (TableCellBox) Type() BoxType { return TableCellBoxT }

// Box for elements with ``display: table-column``
type TableColumnBoxITF interface {
	ParentBoxITF
	isTableColumnBox()
}

func (TableColumnBox) Type() BoxType { return TableColumnBoxT }

// Box for elements with ``display: table-column-group``
type TableColumnGroupBoxITF interface {
	ParentBoxITF
	isTableColumnGroupBox()
}

func (TableColumnGroupBox) Type() BoxType { return TableColumnGroupBoxT }

// Box for elements with ``display: table-row``
type TableRowBoxITF interface {
	ParentBoxITF
	isTableRowBox()
}

func (TableRowBox) Type() BoxType { return TableRowBoxT }

// Box for elements with ``display: table-row-group``
type TableRowGroupBoxITF interface {
	ParentBoxITF
	isTableRowGroupBox()
}

func (TableRowGroupBox) Type() BoxType { return TableRowGroupBoxT }

// A box that contains only text and has no box children.
// Any text in the document ends up in a text box. What CSS calls "anonymous
// inline boxes" are also text boxes.
type TextBoxITF interface {
	InlineLevelBoxITF
	isTextBox()
}

func (TextBox) Type() BoxType { return TextBoxT }

// BoxType represents a box type.
type BoxType uint8

const (
	invalidType BoxType = iota
	AtomicInlineLevelBoxT
	BlockBoxT
	BlockContainerBoxT
	BlockLevelBoxT
	BlockReplacedBoxT
	BoxT
	FlexBoxT
	FlexContainerBoxT
	InlineBlockBoxT
	InlineBoxT
	InlineFlexBoxT
	InlineLevelBoxT
	InlineReplacedBoxT
	InlineTableBoxT
	LineBoxT
	MarginBoxT
	PageBoxT
	ParentBoxT
	ReplacedBoxT
	TableBoxT
	TableCaptionBoxT
	TableCellBoxT
	TableColumnBoxT
	TableColumnGroupBoxT
	TableRowBoxT
	TableRowGroupBoxT
	TextBoxT
)

// Returns true is the box is an instance of t.
func (t BoxType) IsInstance(box BoxITF) bool {
	var isInstance bool
	switch t {
	case AtomicInlineLevelBoxT:
		_, isInstance = box.(AtomicInlineLevelBoxITF)
	case BlockBoxT:
		_, isInstance = box.(BlockBoxITF)
	case BlockContainerBoxT:
		_, isInstance = box.(BlockContainerBoxITF)
	case BlockLevelBoxT:
		_, isInstance = box.(BlockLevelBoxITF)
	case BlockReplacedBoxT:
		_, isInstance = box.(BlockReplacedBoxITF)
	case BoxT:
		_, isInstance = box.(BoxITF)
	case FlexBoxT:
		_, isInstance = box.(FlexBoxITF)
	case FlexContainerBoxT:
		_, isInstance = box.(FlexContainerBoxITF)
	case InlineBlockBoxT:
		_, isInstance = box.(InlineBlockBoxITF)
	case InlineBoxT:
		_, isInstance = box.(InlineBoxITF)
	case InlineFlexBoxT:
		_, isInstance = box.(InlineFlexBoxITF)
	case InlineLevelBoxT:
		_, isInstance = box.(InlineLevelBoxITF)
	case InlineReplacedBoxT:
		_, isInstance = box.(InlineReplacedBoxITF)
	case InlineTableBoxT:
		_, isInstance = box.(InlineTableBoxITF)
	case LineBoxT:
		_, isInstance = box.(LineBoxITF)
	case MarginBoxT:
		_, isInstance = box.(MarginBoxITF)
	case PageBoxT:
		_, isInstance = box.(PageBoxITF)
	case ParentBoxT:
		_, isInstance = box.(ParentBoxITF)
	case ReplacedBoxT:
		_, isInstance = box.(ReplacedBoxITF)
	case TableBoxT:
		_, isInstance = box.(TableBoxITF)
	case TableCaptionBoxT:
		_, isInstance = box.(TableCaptionBoxITF)
	case TableCellBoxT:
		_, isInstance = box.(TableCellBoxITF)
	case TableColumnBoxT:
		_, isInstance = box.(TableColumnBoxITF)
	case TableColumnGroupBoxT:
		_, isInstance = box.(TableColumnGroupBoxITF)
	case TableRowBoxT:
		_, isInstance = box.(TableRowBoxITF)
	case TableRowGroupBoxT:
		_, isInstance = box.(TableRowGroupBoxITF)
	case TextBoxT:
		_, isInstance = box.(TextBoxITF)
	}
	return isInstance
}

func (t BoxType) String() string {
	switch t {
	case AtomicInlineLevelBoxT:
		return "AtomicInlineLevelBox"
	case BlockBoxT:
		return "BlockBox"
	case BlockContainerBoxT:
		return "BlockContainerBox"
	case BlockLevelBoxT:
		return "BlockLevelBox"
	case BlockReplacedBoxT:
		return "BlockReplacedBox"
	case BoxT:
		return "Box"
	case FlexBoxT:
		return "FlexBox"
	case FlexContainerBoxT:
		return "FlexContainerBox"
	case InlineBlockBoxT:
		return "InlineBlockBox"
	case InlineBoxT:
		return "InlineBox"
	case InlineFlexBoxT:
		return "InlineFlexBox"
	case InlineLevelBoxT:
		return "InlineLevelBox"
	case InlineReplacedBoxT:
		return "InlineReplacedBox"
	case InlineTableBoxT:
		return "InlineTableBox"
	case LineBoxT:
		return "LineBox"
	case MarginBoxT:
		return "MarginBox"
	case PageBoxT:
		return "PageBox"
	case ParentBoxT:
		return "ParentBox"
	case ReplacedBoxT:
		return "ReplacedBox"
	case TableBoxT:
		return "TableBox"
	case TableCaptionBoxT:
		return "TableCaptionBox"
	case TableCellBoxT:
		return "TableCellBox"
	case TableColumnBoxT:
		return "TableColumnBox"
	case TableColumnGroupBoxT:
		return "TableColumnGroupBox"
	case TableRowBoxT:
		return "TableRowBox"
	case TableRowGroupBoxT:
		return "TableRowGroupBox"
	case TextBoxT:
		return "TextBox"
	}
	return "<invalid box type>"
}

var (
	_ AtomicInlineLevelBoxITF = (*AtomicInlineLevelBox)(nil)
	_ BlockBoxITF             = (*BlockBox)(nil)
	_ BlockContainerBoxITF    = (*BlockContainerBox)(nil)
	_ BlockLevelBoxITF        = (*BlockLevelBox)(nil)
	_ BlockReplacedBoxITF     = (*BlockReplacedBox)(nil)
	_ BoxITF                  = (*Box)(nil)
	_ FlexBoxITF              = (*FlexBox)(nil)
	_ FlexContainerBoxITF     = (*FlexContainerBox)(nil)
	_ InlineBlockBoxITF       = (*InlineBlockBox)(nil)
	_ InlineBoxITF            = (*InlineBox)(nil)
	_ InlineFlexBoxITF        = (*InlineFlexBox)(nil)
	_ InlineLevelBoxITF       = (*InlineLevelBox)(nil)
	_ InlineReplacedBoxITF    = (*InlineReplacedBox)(nil)
	_ InlineTableBoxITF       = (*InlineTableBox)(nil)
	_ LineBoxITF              = (*LineBox)(nil)
	_ MarginBoxITF            = (*MarginBox)(nil)
	_ PageBoxITF              = (*PageBox)(nil)
	_ ParentBoxITF            = (*ParentBox)(nil)
	_ ReplacedBoxITF          = (*ReplacedBox)(nil)
	_ TableBoxITF             = (*TableBox)(nil)
	_ TableCaptionBoxITF      = (*TableCaptionBox)(nil)
	_ TableCellBoxITF         = (*TableCellBox)(nil)
	_ TableColumnBoxITF       = (*TableColumnBox)(nil)
	_ TableColumnGroupBoxITF  = (*TableColumnGroupBox)(nil)
	_ TableRowBoxITF          = (*TableRowBox)(nil)
	_ TableRowGroupBoxITF     = (*TableRowGroupBox)(nil)
	_ TextBoxITF              = (*TextBox)(nil)
)
