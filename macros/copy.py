""" Generated the Copy methods, recursively """
import re

SOURCE = "/scratch/perso/go-weasyprint/css/properties.go"

RE_TYPEDEF = re.compile(r"^type (\S+) ((struct {)|\[\d?\](\S+)|[\w.]+)")

RE_ARRAY = re.compile(r"\[\d+\](\S+)")

RE_FIELDS = re.compile(r"(\w+)\s+(\w+)")

TEMPLATE_VALUE_TYPE = """
func (v {type_}) Copy() CssProperty {{ return v }}
"""

# type_ : kind, subtype (for array and slice) or {field: subtype} for struct
# possible kind: array, slice, struct, ident
TYPES = {}


def analyse_struct(lines):
    out = {}
    for line in lines:
        match = RE_FIELDS.search(line)
        field, type_ = match.group(1), match.group(2)
        out[field] = analyse_type(type_)
    return out


def analyse_type(value: str):
    match_array = RE_ARRAY.search(value)
    if match_array:
        next_type = match_array.group(1)
        meta = analyse_type(next_type)
        return ("array", meta)
    elif value.startswith("[]"):
        meta = analyse_type(next_type)
        return ("slice", meta)
    elif value.startswith("struct"):
        return ("struct", analyse_struct(value.split("\n")[1:-1]))
    else:
        return ("ident", value)


def isValueType(type_: str):
    match_array = RE_ARRAY.search(type_)
    if type_[0].islower():
        return True
    elif type_.startswith("[]"):
        return False
    elif match_array:
        next_type = match_array.group(1)
        return isValueType(next_type)


with open(SOURCE) as f:
    code = """package properties 

    // autogenerated from types.go
    """
    for line in f.readlines():
        match = RE_TYPEDEF.search(line)
        if match:
            type_ = match.group(1)
            kind = match.group(2)

            if kind.startswith("[]"):
                print("copying list")
            elif kind.startswith("struct"):
                print("copying struct")
            elif !kind"interface {":
                code += TEMPLATE_VALUE_TYPE.format(type_=type_)

print(code)
